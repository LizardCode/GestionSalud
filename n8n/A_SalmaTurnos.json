{
  "name": "A_SalmaTurnos",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ac247fd3-9ca7-42a3-8942-7ea8c321c46d",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3600,
        500
      ],
      "id": "08ddb453-b34b-4dbf-94fc-682b400b836f",
      "name": "Webhook",
      "webhookId": "ac247fd3-9ca7-42a3-8942-7ea8c321c46d"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst message = items[0].json.body.data.message;\n\n\n\nif (!message) {\n  return [{ json: { error: \"No message found\" } }];\n}\n\nif (message.type !=='chat') {\n  return null;\n}\n\n\n\n\nconst chatId = message.from;\nconst messageText = message.body?.trim();\nconst messageId = message.id;\n\n// Limpiar chatId - remover @c.us si existe\n// if (chatId.includes('@c.us')) {\n//   chatId = chatId.replace('@c.us', '');\n// }\n\n// Tambi√©n limpiar otros formatos posibles\n// chatId = chatId.replace('@g.us', '').replace('@newsletter', '');\n\nreturn {\n  json: {\n    chatId: chatId,\n    messageText: messageText,\n    messageId: messageId,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3180,
        440
      ],
      "id": "ff8d02d3-00af-4c39-a617-338bae893d6c",
      "name": "menssageIn"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Get User Session (JSONBin version)\nconst chatId = $('menssageIn').first().json.chatId;\nconst messageText = $('menssageIn').first().json.messageText;\n\n// Los datos vienen del HTTP Request \"Read JSONBin\"\nlet allSessions = {};\nlet userSession = null;\n\ntry {\n  // JSONBin devuelve la data en $json.record.sessions\n   const jsonbinData = $('Read JSONBin').first().json;\n  \n if (jsonbinData.record) {\n    allSessions = jsonbinData.record;  // Los datos est√°n directamente en record\n    userSession = allSessions[chatId];\n    console.log('Sesiones en JSONBin:', Object.keys(allSessions).length);\n    console.log('Sesi√≥n encontrada:', userSession ? 'S√ç' : 'NO');\n}\n  \n  console.log('=== JSONBin READ ===');\n  console.log('ChatId buscado:', chatId);\n  console.log('Total sesiones:', Object.keys(allSessions).length);\n  console.log('Sesi√≥n encontrada:', userSession ? 'S√ç' : 'NO');\n  if (userSession) {\n    console.log('Estado actual:', userSession.estado);\n  }\n  console.log('==================');\n} catch (error) {\n  console.log('Error leyendo JSONBin:', error.message);\n}\n\nif (!userSession) {\n  userSession = {\n    chatId: chatId,\n    estado: \"INICIO\",\n    datos: {},\n    createdAt: new Date().toISOString(),\n    lastActivity: new Date().toISOString()\n  };\n  console.log('==> Creando NUEVA sesi√≥n');\n} else {\n  userSession.lastActivity = new Date().toISOString();\n  console.log('==> Sesi√≥n EXISTENTE, estado:', userSession.estado);\n}\n\nreturn {\n  json: {\n    chatId: chatId,\n    messageText: messageText,\n    userSession: userSession,\n    debug: {\n      sessionExists: !!allSessions[chatId],\n      currentState: userSession.estado\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2780,
        80
      ],
      "id": "2c5d041d-d383-42fd-a91f-c75563db90de",
      "name": "Get User Session"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Process Step Logic (CON SELECCI√ìN M√öLTIPLE Y VALIDACI√ìN DNI MEJORADA)\nconst messageText = $json.messageText.toLowerCase();\nconst userSession = $json.userSession;\nconst chatId = $json.chatId;\nconst maestros = $('Format Maestros').first().json;\n\nlet response = {};\nlet newEstado = userSession.estado;\nlet updateData = { ...userSession.datos };\nlet isValid = true;\nlet errorMessage = \"\";\n\n// Funci√≥n auxiliar para parsear selecci√≥n m√∫ltiple\nfunction parseMultipleSelection(input, validOptions) {\n  console.log('=== PARSE MULTIPLE SELECTION ===');\n  console.log('Input:', input);\n  console.log('Valid options:', Object.keys(validOptions));\n  \n  if (!input || typeof input !== 'string') {\n    console.log('Invalid input type');\n    return {\n      valid: false,\n      selections: [],\n      invalidItems: [input]\n    };\n  }\n  \n  const selections = input.split(',').map(item => item.trim()).filter(item => item.length > 0);\n  const validSelections = [];\n  const invalidItems = [];\n  \n  console.log('Parsed selections:', selections);\n  \n  for (const selection of selections) {\n    if (validOptions.hasOwnProperty(selection)) {\n      validSelections.push({\n        id: selection,\n        value: validOptions[selection]\n      });\n      console.log(`Valid selection: ${selection} -> ${validOptions[selection]}`);\n    } else {\n      invalidItems.push(selection);\n      console.log(`Invalid selection: ${selection}`);\n    }\n  }\n  \n  const result = {\n    valid: invalidItems.length === 0 && validSelections.length > 0,\n    selections: validSelections,\n    invalidItems: invalidItems\n  };\n  \n  console.log('Final result:', JSON.stringify(result, null, 2));\n  console.log('================================');\n  \n  return result;\n}\n\nswitch (userSession.estado) {\n  case \"INICIO\":\n    // Cualquier mensaje inicia el proceso\n    response = {\n      message: \"üè• *Bienvenido al Sistema de Turnos*\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\",\n      nextStep: \"ESPERANDO_DNI\"\n    };\n    newEstado = \"ESPERANDO_DNI\";\n    break;\n\n  case \"COMPLETADO\":\n    // NUEVO CASO: Usuario que ya complet√≥ un turno quiere hacer otro\n    console.log('=== REINICIANDO USUARIO COMPLETADO ===');\n    console.log('Usuario:', chatId);\n    console.log('Estado anterior:', userSession.estado);\n    console.log('Datos anteriores:', JSON.stringify(userSession.datos, null, 2));\n    \n    // Limpiar datos y reiniciar\n    updateData = {};\n    response = {\n      message: \"üè• *Bienvenido nuevamente al Sistema de Turnos*\\n\\n¬øDesea agendar un nuevo turno?\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\",\n      nextStep: \"ESPERANDO_DNI\"\n    };\n    newEstado = \"ESPERANDO_DNI\";\n    \n    console.log('Nuevo estado:', newEstado);\n    console.log('Datos limpiados:', JSON.stringify(updateData, null, 2));\n    console.log('=====================================');\n    break;\n\n  case \"ESPERANDO_DNI\":\n    const dniInput = $json.messageText.trim();\n    \n    console.log('=== VALIDACI√ìN DNI DEBUG ===');\n    console.log('Input original:', JSON.stringify(dniInput));\n    console.log('Input length:', dniInput.length);\n    console.log('Input chars:', dniInput.split('').map(c => c.charCodeAt(0)));\n    \n    // Limpiar DNI: quitar espacios, puntos, comas, guiones\n    const cleanDNI = dniInput\n      .replace(/\\s+/g, '')        // Quitar espacios\n      .replace(/\\./g, '')         // Quitar puntos\n      .replace(/,/g, '')          // Quitar comas  \n      .replace(/-/g, '')          // Quitar guiones\n      .replace(/[^\\d]/g, '');     // Quitar cualquier car√°cter que no sea d√≠gito\n    \n    console.log('DNI limpio:', cleanDNI);\n    console.log('DNI length:', cleanDNI.length);\n    console.log('Es solo n√∫meros:', /^\\d+$/.test(cleanDNI));\n    console.log('===========================');\n    \n    // Validar DNI limpio (solo n√∫meros, 7-8 d√≠gitos)\n    if (!cleanDNI || cleanDNI.length < 7 || cleanDNI.length > 8 || !/^\\d+$/.test(cleanDNI)) {\n      isValid = false;\n      errorMessage = `‚ùå *DNI inv√°lido*\\n\\nPor favor ingrese solo n√∫meros, entre 7 y 8 d√≠gitos.\\n\\nüìù *Formatos aceptados:*\\n‚Ä¢ 25430441\\n‚Ä¢ 25.430.441\\n‚Ä¢ 25 430 441\\n\\n‚ö†Ô∏è *Su entrada:* \"${dniInput}\"\\nüí° *Procesado como:* \"${cleanDNI}\"`;\n      \n      console.log('‚ùå DNI INV√ÅLIDO - Raz√≥n:', {\n        empty: !cleanDNI,\n        tooShort: cleanDNI.length < 7,\n        tooLong: cleanDNI.length > 8,\n        notNumbers: !/^\\d+$/.test(cleanDNI),\n        length: cleanDNI.length\n      });\n    } else {\n      updateData.dni = cleanDNI; // Guardar DNI limpio\n      \n      console.log('‚úÖ DNI V√ÅLIDO:', cleanDNI);\n      \n      // Obtener especialidades del maestro\n      const especialidades = maestros.especialidades;\n      \n      let especialidadesText = \"üë®‚Äç‚öïÔ∏è *Seleccione una especialidad:*\\n\\n\";\n      especialidades.forEach(esp => {\n        especialidadesText += `${esp.idEspecialidad}. ${esp.descripcion}\\n`;\n      });\n      \n      response = {\n        message: especialidadesText,\n        nextStep: \"ESPERANDO_ESPECIALIDAD\"\n      };\n      newEstado = \"ESPERANDO_ESPECIALIDAD\";\n    }\n    break;\n\n  case \"ESPERANDO_ESPECIALIDAD\":\n    const especialidadId = parseInt($json.messageText.trim());\n    const especialidad = maestros.especialidades.find(e => e.idEspecialidad === especialidadId);\n    \n    if (!especialidad) {\n      isValid = false;\n      let opciones = maestros.especialidades.map(e => `${e.idEspecialidad}. ${e.descripcion}`).join('\\n');\n      errorMessage = `‚ùå *No se reconoce el valor ingresado*\\n\\nOpciones v√°lidas:\\n${opciones}`;\n    } else {\n      updateData.especialidad = especialidad;\n      \n      // En lugar de mostrar d√≠as inmediatamente, configurar para activar el flujo din√°mico\n      response = {\n        message: \"‚è≥ *Procesando especialidad seleccionada...*\\n\\nObteniendo d√≠as disponibles para ${especialidad.descripcion}.\",\n        nextStep: \"ESPERANDO_DIA\",\n        triggerDynamicFlow: true\n      };\n      newEstado = \"ESPERANDO_DIA\";\n      \n      console.log('=== ESPECIALIDAD SELECTED FOR DYNAMIC FLOW ===');\n      console.log('Especialidad seleccionada:', especialidad);\n      console.log('Activando flujo din√°mico para obtener d√≠as y horarios');\n      console.log('=============================================');\n    }\n    break;\n\n  case \"ESPERANDO_DIA\":\n    const diasInput = $json.messageText.trim();\n    \n    // Verificar si tenemos datos din√°micos cargados\n    let diasObj = {};\n    let hasDynamicData = false;\n    \n    try {\n      const userSessionFromJSONBin = $('Read JSONBin').first().json.record[userSession.chatId];\n      if (userSessionFromJSONBin && userSessionFromJSONBin.maestrosDinamicos && userSessionFromJSONBin.maestrosDinamicos.dias) {\n        diasObj = userSessionFromJSONBin.maestrosDinamicos.dias;\n        hasDynamicData = true;\n        console.log('‚úÖ FOUND dynamic dias data');\n        console.log('Dynamic dias:', JSON.stringify(diasObj, null, 2));\n      } else {\n        console.log('‚ùå NO dynamic dias data found, user should wait');\n      }\n    } catch (error) {\n      console.log('Error accessing dynamic data:', error.message);\n    }\n    \n    // Si no hay datos din√°micos, mostrar mensaje de carga\n    if (!hasDynamicData || Object.keys(diasObj).length === 0) {\n      response = {\n        message: \"‚è≥ Cargando d√≠as disponibles...\\n\\nPor favor espere un momento mientras obtenemos la informaci√≥n.\",\n        nextStep: \"ESPERANDO_DIA\"\n      };\n      newEstado = \"ESPERANDO_DIA\"; // Mantener el mismo estado\n      break;\n    }\n    \n    // Solo procesar selecci√≥n si tenemos datos din√°micos\n    const diasResult = parseMultipleSelection(diasInput, diasObj);\n    \n    if (!diasResult.valid || diasResult.selections.length === 0) {\n      isValid = false;\n      let opciones = Object.keys(diasObj).map(key => `${key}. ${diasObj[key]}`).join('\\n');\n      let errorMsg = `‚ùå *No se reconoce el valor ingresado*\\n\\nOpciones v√°lidas:\\n${opciones}\\n\\n`;\n      if (diasResult.invalidItems.length > 0) {\n        errorMsg += `Valores inv√°lidos: ${diasResult.invalidItems.join(', ')}\\n`;\n      }\n      errorMsg += \"üí° Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas\\nEjemplo: 1,3,5\";\n      errorMessage = errorMsg;\n    } else {\n      updateData.dias = diasResult.selections;\n      \n      console.log('=== DIAS SELECTION DEBUG ===');\n      console.log('Input:', diasInput);\n      console.log('Parsed result:', JSON.stringify(diasResult, null, 2));\n      console.log('Stored in updateData.dias:', JSON.stringify(updateData.dias, null, 2));\n      console.log('============================');\n      \n      // Obtener rangos horarios din√°micos de la sesi√≥n\n      let horariosObj = {};\n      try {\n        const userSessionFromJSONBin = $('Read JSONBin').first().json.record[userSession.chatId];\n        if (userSessionFromJSONBin && userSessionFromJSONBin.maestrosDinamicos && userSessionFromJSONBin.maestrosDinamicos.rangosHorarios) {\n          horariosObj = userSessionFromJSONBin.maestrosDinamicos.rangosHorarios;\n          console.log('=== USING DYNAMIC RANGOS HORARIOS ===');\n          console.log('Dynamic rangos horarios:', JSON.stringify(horariosObj, null, 2));\n          console.log('====================================');\n        } else {\n          // Fallback a datos est√°ticos si no hay din√°micos\n          horariosObj = maestros.rangosHorarios || {};\n          console.log('=== FALLBACK TO STATIC RANGOS HORARIOS ===');\n          console.log('Static rangos horarios:', JSON.stringify(horariosObj, null, 2));\n          console.log('==========================================');\n        }\n      } catch (error) {\n        console.log('Error getting dynamic rangos horarios, using fallback:', error.message);\n        horariosObj = maestros.rangosHorarios || {};\n      }\n      \n      let horariosText = \"üïê *Seleccione uno o m√°s rangos de horario:*\\n\\n\";\n      Object.keys(horariosObj).forEach(key => {\n        horariosText += `${key}. ${horariosObj[key]}\\n`;\n      });\n      horariosText += \"\\nüí° *Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas*\\n\";\n      horariosText += \"Ejemplo: 1,2,4\";\n      \n      response = {\n        message: horariosText,\n        nextStep: \"ESPERANDO_HORARIO\"\n      };\n      newEstado = \"ESPERANDO_HORARIO\";\n    }\n    break;\n\n  case \"ESPERANDO_HORARIO\":\n    const horariosInput = $json.messageText.trim();\n    \n    // Obtener rangos horarios din√°micos de la sesi√≥n\n    let horariosObj = {};\n    try {\n      const userSessionFromJSONBin = $('Read JSONBin').first().json.record[userSession.chatId];\n      if (userSessionFromJSONBin && userSessionFromJSONBin.maestrosDinamicos && userSessionFromJSONBin.maestrosDinamicos.rangosHorarios) {\n        horariosObj = userSessionFromJSONBin.maestrosDinamicos.rangosHorarios;\n        console.log('=== USING DYNAMIC RANGOS HORARIOS (HORARIO SELECTION) ===');\n        console.log('Dynamic rangos horarios:', JSON.stringify(horariosObj, null, 2));\n        console.log('========================================================');\n      } else {\n        // Fallback a datos est√°ticos si no hay din√°micos\n        horariosObj = maestros.rangosHorarios || {};\n        console.log('=== FALLBACK TO STATIC RANGOS HORARIOS (HORARIO SELECTION) ===');\n        console.log('Static rangos horarios:', JSON.stringify(horariosObj, null, 2));\n        console.log('==============================================================');\n      }\n    } catch (error) {\n      console.log('Error getting dynamic rangos horarios for selection, using fallback:', error.message);\n      horariosObj = maestros.rangosHorarios || {};\n    }\n    \n    const horariosResult = parseMultipleSelection(horariosInput, horariosObj);\n    \n    if (!horariosResult.valid || horariosResult.selections.length === 0) {\n      isValid = false;\n      let opciones = Object.keys(horariosObj).map(key => `${key}. ${horariosObj[key]}`).join('\\n');\n      let errorMsg = `‚ùå *No se reconoce el valor ingresado*\\n\\nOpciones v√°lidas:\\n${opciones}\\n\\n`;\n      if (horariosResult.invalidItems.length > 0) {\n        errorMsg += `Valores inv√°lidos: ${horariosResult.invalidItems.join(', ')}\\n`;\n      }\n      errorMsg += \"üí° Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas\\nEjemplo: 1,2,4\";\n      errorMessage = errorMsg;\n    } else {\n      updateData.horarios = horariosResult.selections;\n      \n      console.log('=== HORARIOS SELECTION DEBUG ===');\n      console.log('Input:', horariosInput);\n      console.log('Parsed result:', JSON.stringify(horariosResult, null, 2));\n      console.log('Stored in updateData.horarios:', JSON.stringify(updateData.horarios, null, 2));\n      console.log('================================');\n      \n      // Mostrar resumen y confirmaci√≥n con m√∫ltiples selecciones\n      const diasSeleccionados = updateData.dias.map(d => d.value).join(', ');\n      const horariosSeleccionados = updateData.horarios.map(h => h.value).join(', ');\n      \n      const resumen = `üìã *Resumen del Turno:*\\n\\n` +\n                     `üë§ DNI: ${updateData.dni}\\n` +\n                     `üë®‚Äç‚öïÔ∏è Especialidad: ${updateData.especialidad.descripcion}\\n` +\n                     `üìÖ D√≠as: ${diasSeleccionados}\\n` +\n                     `üïê Horarios: ${horariosSeleccionados}\\n\\n` +\n                     `*¬øConfirma el turno?*\\n\\n` +\n                     `1. ‚úÖ Aceptar\\n` +\n                     `2. ‚ùå Cancelar`;\n      \n      response = {\n        message: resumen,\n        nextStep: \"CONFIRMACION\"\n      };\n      newEstado = \"CONFIRMACION\";\n    }\n    break;\n\n  case \"CONFIRMACION\":\n    const confirmacion = parseInt($json.messageText.trim());\n    \n    if (confirmacion === 1) {\n      // Aceptar - preparar para env√≠o a API\n      response = {\n        message: \"‚úÖ *Turno confirmado*\\n\\nProcesando su solicitud...\",\n        nextStep: \"COMPLETADO\",\n        sendToAPI: true\n      };\n      newEstado = \"COMPLETADO\";\n    } else if (confirmacion === 2) {\n      // Cancelar - reiniciar proceso\n      updateData = {};\n      response = {\n        message: \"‚ùå *Turno cancelado*\\n\\n¬øDesea agendar un nuevo turno?\\n\\nEnv√≠e cualquier mensaje para comenzar.\",\n        nextStep: \"INICIO\"\n      };\n      newEstado = \"INICIO\";\n    } else {\n      isValid = false;\n      errorMessage = \"‚ùå *No se reconoce el valor ingresado*\\n\\nOpciones v√°lidas:\\n1. ‚úÖ Aceptar\\n2. ‚ùå Cancelar\";\n    }\n    break;\n\n  default:\n    // Estado desconocido, reiniciar\n    console.log('=== ESTADO DESCONOCIDO - REINICIANDO ===');\n    console.log('Estado actual:', userSession.estado);\n    console.log('======================================');\n    \n    response = {\n      message: \"üè• *Bienvenido al Sistema de Turnos*\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\",\n      nextStep: \"ESPERANDO_DNI\"\n    };\n    newEstado = \"ESPERANDO_DNI\";\n    updateData = {};\n}\n\n// APLICAR LIMPIEZA DE CARACTERES (CORREGIDA)\nlet finalMessage = isValid ? response.message : errorMessage;\n\n// Limpiar caracteres especiales para WAAPI pero mantener saltos de l√≠nea\nlet cleanedResponse = finalMessage\n  // Quitamos los encabezados #\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  // Quitamos asteriscos de negrita\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  // Simplificamos listados\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\n// NO aplicar JSON.stringify para mantener los saltos de l√≠nea\n// cleanedResponse = JSON.stringify(cleanedResponse).slice(1, -1);\n\n// Resultado final\nreturn {\n  json: {\n    chatId: chatId,\n    isValid: isValid,\n    response: {\n      message: cleanedResponse, // Mensaje limpio para WAAPI\n      sendToAPI: response.sendToAPI || false\n    },\n    newEstado: isValid ? newEstado : userSession.estado,\n    updateData: isValid ? updateData : userSession.datos,\n    sendToAPI: response.sendToAPI || false,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2600,
        180
      ],
      "id": "874a343d-ea34-434e-b263-d65cd06df5fb",
      "name": "Process Step Logic"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/login",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"user\": \"admin\",\n  \"password\": \"1234\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2980,
        -120
      ],
      "id": "1643304b-63af-416e-b986-aaa62233b184",
      "name": "Get Maestros Token"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        -2680,
        -220
      ],
      "id": "2abacc3a-b44f-4d13-aada-091b6d204e03",
      "name": "Set Shared Token"
    },
    {
      "parameters": {
        "url": "https://api.salmasalud.com.ar/especialidades",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Set Shared Token').first().json.token }}"
            },
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2420,
        440
      ],
      "id": "a97aac04-1dc3-468a-ad33-d09d618c06e3",
      "name": "Get Especialidades"
    },
    {
      "parameters": {
        "jsCode": "// Nodo: Format Maestros Data\n// CORREGIDO: Usar $input.all (sin par√©ntesis) para obtener TODAS las especialidades\nconst allInputs = $input.all()\nlet especialidades = [];\n\nconsole.log('=== ESPECIALIDADES FROM API (CORREGIDO) ===');\nconsole.log('Total inputs received:', allInputs.length);\nconsole.log('All inputs:', JSON.stringify(allInputs, null, 2));\n\n// Extraer todas las especialidades de todos los inputs\nfor (const input of allInputs) {\n  if (Array.isArray(input.json)) {\n    // Si el input.json es un array, agregamos todos los elementos\n    especialidades = especialidades.concat(input.json);\n    console.log('Added array of especialidades:', input.json.length, 'items');\n  } else if (input.json && typeof input.json === 'object') {\n    // Si es un objeto individual, lo agregamos como item √∫nico\n    especialidades.push(input.json);\n    console.log('Added single especialidad:', input.json.descripcion || input.json);\n  }\n}\n\nconsole.log('=======================================');\n\n// Formatear especialidades para mantener compatibilidad con el c√≥digo existente\nconst maestrosData = {\n  especialidades: especialidades\n};\n\nconsole.log('=== MAESTROS FORMATTED (CORREGIDO) ===');\nconsole.log('Total especialidades processed:', especialidades.length);\nconsole.log('Final maestros data:', JSON.stringify(maestrosData, null, 2));\nconsole.log('=====================================');\n\nreturn {\n  json: maestrosData\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2220,
        0
      ],
      "id": "a5412f75-c752-4038-952b-c2b25cd6c192",
      "name": "Format Maestros"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Update User Session (CORREGIDO PARA JSONBIN)\nconst processData = $json;\nconst chatId = processData.chatId;\nconst newEstado = processData.newEstado;\nconst updateData = processData.updateData;\n\n// Obtener las sesiones actuales desde JSONBin\nlet allSessions = {};\ntry {\n  const jsonbinData = $('Read JSONBin').first().json;\n  if (jsonbinData && jsonbinData.record) {\n    allSessions = { ...jsonbinData.record };\n  }\n  console.log('=== UPDATE USER SESSION ===');\n  console.log('ChatId a actualizar:', chatId);\n  console.log('Nuevo estado:', newEstado);\n  console.log('Datos a actualizar:', JSON.stringify(updateData, null, 2));\n  console.log('Sesiones existentes:', Object.keys(allSessions).length);\n} catch (error) {\n  console.error('Error obteniendo sesiones de JSONBin:', error);\n}\n\n// Actualizar o crear la sesi√≥n del usuario\nallSessions[chatId] = {\n  chatId: chatId,\n  estado: newEstado,\n  datos: updateData,\n  createdAt: allSessions[chatId]?.createdAt || new Date().toISOString(),\n  lastActivity: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\nconsole.log('=== SESI√ìN ACTUALIZADA ===');\nconsole.log('Sesi√≥n del usuario:', JSON.stringify(allSessions[chatId], null, 2));\nconsole.log('Total sesiones despu√©s de actualizar:', Object.keys(allSessions).length);\nconsole.log('============================');\n\n// Preparar estructura para JSONBin\nconst jsonbinPayload = {\n  sessions: allSessions\n};\n\nreturn {\n  json: jsonbinPayload\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2340,
        140
      ],
      "id": "2be9f882-bf32-44b9-b394-2ba8bd2de6cf",
      "name": "Update User Session"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Prepare API Request (CON VALIDACI√ìN MEJORADA)\nconst processStepData = $('Process Step Logic').first().json;\nconst jsonbinData = $json;\n\nconsole.log('=== PREPARE API REQUEST DEBUG ===');\nconsole.log('Process Step Data:', JSON.stringify(processStepData, null, 2));\nconsole.log('JSONBin Data keys:', Object.keys(jsonbinData));\nconsole.log('Send to API from Process Step:', processStepData.sendToAPI);\nconsole.log('================================');\n\n// VALIDACI√ìN PRINCIPAL: Verificar si debe enviar a API desde Process Step Logic\nif (!processStepData.sendToAPI) {\n  console.log('‚ùå SKIPPING API - Process Step Logic says sendToAPI = false');\n  return {\n    json: {\n      skipAPI: true,\n      reason: \"Process Step Logic indicates no API call needed\",\n      processStepData: processStepData\n    }\n  };\n}\n\n// Obtener datos de la sesi√≥n actualizada\nlet userSession = null;\nlet sendToAPI = false;\n\ntry {\n  // Los datos vienen en record desde JSONBin\n  if (jsonbinData.record) {\n    const sessions = jsonbinData.record;\n    \n    // Buscar la sesi√≥n que coincida con el chatId del Process Step Logic\n    const targetChatId = processStepData.chatId;\n    \n    if (sessions[targetChatId]) {\n      userSession = sessions[targetChatId];\n      \n      // VALIDACI√ìN CR√çTICA: Solo enviar a API si est√° en estado COMPLETADO Y Process Step Logic lo confirma\n      if (userSession.estado === \"COMPLETADO\" && processStepData.sendToAPI === true) {\n        sendToAPI = true;\n      }\n    }\n  }\n  \n  console.log('=== SESSION VALIDATION ===');\n  console.log('Target ChatId:', processStepData.chatId);\n  console.log('User session found:', !!userSession);\n  console.log('User session state:', userSession?.estado);\n  console.log('Send to API decision:', sendToAPI);\n  console.log('========================');\n  \n} catch (error) {\n  console.error('Error extrayendo datos de JSONBin:', error);\n  return {\n    json: {\n      skipAPI: true,\n      error: \"Error extrayendo datos de JSONBin: \" + error.message\n    }\n  };\n}\n\n// Verificar si debe enviar a API\nif (!sendToAPI || !userSession || !userSession.datos || !userSession.datos.dni) {\n  console.log('‚ùå SKIPPING API - Validation failed');\n  console.log('sendToAPI:', sendToAPI);\n  console.log('userSession exists:', !!userSession);\n  console.log('userSession.datos exists:', !!userSession?.datos);\n  console.log('DNI exists:', !!userSession?.datos?.dni);\n  \n  return {\n    json: {\n      skipAPI: true,\n      message: \"No se requiere env√≠o a API - validaci√≥n fallida\",\n      debugInfo: {\n        sendToAPI,\n        hasUserSession: !!userSession,\n        hasUserData: !!userSession?.datos,\n        hasDNI: !!userSession?.datos?.dni,\n        userState: userSession?.estado\n      }\n    }\n  };\n}\n\n// Preparar arrays de d√≠as y horarios desde las selecciones m√∫ltiples\nlet diasArray = [];\nlet horariosArray = [];\n\nconsole.log('=== DEBUGGING SELECTION DATA ===');\nconsole.log('userSession.datos:', JSON.stringify(userSession.datos, null, 2));\nconsole.log('dias exists:', !!userSession.datos.dias);\nconsole.log('horarios exists:', !!userSession.datos.horarios);\n\n// Extraer d√≠as seleccionados con validaci√≥n robusta\nif (userSession.datos.dias && Array.isArray(userSession.datos.dias)) {\n  console.log('Processing multiple dias:', userSession.datos.dias);\n  diasArray = userSession.datos.dias\n    .filter(dia => dia && dia.id !== undefined && dia.id !== null)\n    .map(dia => parseInt(dia.id));\n} else if (userSession.datos.dia && userSession.datos.dia.id) {\n  // Compatibilidad con versi√≥n anterior (selecci√≥n √∫nica)\n  console.log('Processing single dia:', userSession.datos.dia);\n  diasArray = [parseInt(userSession.datos.dia.id)];\n}\n\n// Extraer horarios seleccionados con validaci√≥n robusta\nif (userSession.datos.horarios && Array.isArray(userSession.datos.horarios)) {\n  console.log('Processing multiple horarios:', userSession.datos.horarios);\n  horariosArray = userSession.datos.horarios\n    .filter(horario => horario && horario.id !== undefined && horario.id !== null)\n    .map(horario => parseInt(horario.id));\n} else if (userSession.datos.horario && userSession.datos.horario.id) {\n  // Compatibilidad con versi√≥n anterior (selecci√≥n √∫nica)\n  console.log('Processing single horario:', userSession.datos.horario);\n  horariosArray = [parseInt(userSession.datos.horario.id)];\n}\n\nconsole.log('Final diasArray:', diasArray);\nconsole.log('Final horariosArray:', horariosArray);\nconsole.log('===============================');\n\n// Preparar datos para API seg√∫n formato requerido\nconst apiData = {\n  documento: userSession.datos.dni,\n  telefono: userSession.chatId.split('@')[0],\n  idEspecialidad: userSession.datos.especialidad.idEspecialidad,\n  dias: diasArray,\n  rangosHorarios: horariosArray\n};\n\nconsole.log('=== API DATA PREPARED (VALIDATED) ===');\nconsole.log('D√≠as seleccionados:', diasArray);\nconsole.log('Horarios seleccionados:', horariosArray);\nconsole.log('API Data:', JSON.stringify(apiData, null, 2));\nconsole.log('====================================');\n\n// Validar que tenemos al menos una selecci√≥n de cada\nif (diasArray.length === 0 || horariosArray.length === 0) {\n  console.error('‚ùå Error: No hay d√≠as u horarios seleccionados');\n  return {\n    json: {\n      skipAPI: true,\n      error: \"Error: Faltan d√≠as u horarios seleccionados\"\n    }\n  };\n}\n\nreturn {\n  json: {\n    skipAPI: false,\n    apiData: apiData,\n    chatId: userSession.chatId,\n    userSession: userSession,\n    selectionSummary: {\n      diasCount: diasArray.length,\n      horariosCount: horariosArray.length,\n      totalCombinations: diasArray.length * horariosArray.length\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1700,
        220
      ],
      "id": "e0f24400-0cce-486d-87d8-b1cffd528ab3",
      "name": "Prepare API Request"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Format Final Response - CORREGIDO PARA EVITAR ESCAPE DE CARACTERES\nconst skipAPI = $json.skipAPI || false;\nlet finalMessage = \"\";\nlet chatId = \"\";\n\n// Obtener chatId del flujo\ntry {\n  chatId = $('menssageIn').first().json.chatId || $('Get User Session').first().json.chatId;\n} catch {\n  chatId = \"unknown\";\n}\n\nif (skipAPI) {\n  // Si no se envi√≥ a API, obtener el mensaje del Process Step Logic\n  try {\n    const stepLogicResponse = $('Process Step Logic').first().json.response;\n    finalMessage = stepLogicResponse ? stepLogicResponse.message : \"Mensaje procesado correctamente\";\n  } catch {\n    finalMessage = \"Error al obtener respuesta del flujo\";\n  }\n} else {\n  // Respuesta de la API\n  const apiResponse = $json;\n  let userSession = null;\n  \n  // Obtener sesi√≥n de usuario\n  try {\n    userSession = $('Prepare API Request').first().json.userSession;\n  } catch {\n    userSession = null;\n  }\n  \n  console.log('=== FORMAT FINAL RESPONSE ===');\n  console.log('API Response:', JSON.stringify(apiResponse, null, 2));\n  console.log('User Session:', userSession ? 'Found' : 'Not found');\n  if (userSession) {\n    console.log('User Session Data:', JSON.stringify(userSession.datos, null, 2));\n  }\n  console.log('============================');\n  \n  // NUEVA CONDICI√ìN: La API devuelve un array con el ID del turno\n  if (apiResponse && (typeof apiResponse === 'number' || typeof apiResponse === 'string')) {\n    const turnoId = apiResponse;\n    \n    if (userSession && userSession.datos) {\n      // Construir mensaje con selecciones m√∫ltiples\n      let diasText = 'N/A';\n      let horariosText = 'N/A';\n      \n      // Manejar d√≠as (m√∫ltiples o √∫nico)\n      if (userSession.datos.dias && Array.isArray(userSession.datos.dias)) {\n        diasText = userSession.datos.dias.map(d => d.value).join(', ');\n      } else if (userSession.datos.dia && userSession.datos.dia.nombre) {\n        diasText = userSession.datos.dia.nombre;\n      }\n      \n      // Manejar horarios (m√∫ltiples o √∫nico)\n      if (userSession.datos.horarios && Array.isArray(userSession.datos.horarios)) {\n        horariosText = userSession.datos.horarios.map(h => h.value).join(', ');\n      } else if (userSession.datos.horario && userSession.datos.horario.rango) {\n        horariosText = userSession.datos.horario.rango;\n      }\n      \n      finalMessage = `‚úÖ ¬°Turno agendado exitosamente!\\n\\n` +\n                     `üé´ N√∫mero de turno: ${turnoId}\\n` +\n                     `üë§ DNI: ${userSession.datos.dni}\\n` +\n                     `üìû Tel√©fono: ${userSession.chatId.split('@')[0]}\\n` +\n                     `üë®‚Äç‚öïÔ∏è Especialidad: ${userSession.datos.especialidad ? userSession.datos.especialidad.descripcion : 'N/A'}\\n` +\n                     `üìÖ D√≠as: ${diasText}\\n` +\n                     `üïê Horarios: ${horariosText}\\n\\n` +\n                     `üì± Guarde este n√∫mero de turno para futuras consultas.\\n\\n` +\n                     `¬°Gracias por usar nuestro sistema!`;\n    } else {\n      finalMessage = `‚úÖ ¬°Turno agendado exitosamente!\\n\\nüé´ N√∫mero de turno: ${turnoId}`;\n    }\n  } else {\n    // Si no es un ID v√°lido, es un error\n    finalMessage = `‚ùå Error al agendar el turno\\n\\n` +\n                   `Lo sentimos, hubo un problema al procesar su solicitud.\\n` +\n                   `Por favor intente nuevamente m√°s tarde.\\n\\n` +\n                   `Error: ${typeof apiResponse === 'string' ? apiResponse : JSON.stringify(apiResponse) || 'Error desconocido'}`;\n  }\n}\n\n// CR√çTICO: LIMPIEZA M√çNIMA Y SEGURA DE CARACTERES - SIN JSON.stringify\nlet cleanedMessage = finalMessage\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\") // Solo quitar negritas dobles\n  .replace(/\\*(.*?)\\*/g, \"$1\");    // Solo quitar negritas simples\n\n// NO USAR JSON.stringify QUE ESCAPA CARACTERES ESPECIALES\n// cleanedMessage = JSON.stringify(cleanedMessage).slice(1, -1); // ‚ùå REMOVIDO\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: cleanedMessage,\n    messageType: \"text\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1780,
        560
      ],
      "id": "d7900463-2123-477d-bebf-95f1aa5d5387",
      "name": "Format Final Response"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/solicitar",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Set Shared Token').first().json.token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Prepare API Request').first().json.apiData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2100,
        420
      ],
      "id": "410472c4-b33c-422b-9b59-f3b70680b01a",
      "name": "Send to API"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://waapi.app/api/v1/instances/76556/client/action/send-message",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer RnfskkYrbR0Sh2Acnr5B9GwPDl545m1jPPKDbccoa2ab2e89"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chatId\": {{ JSON.stringify($json.chatId) }},\n  \"message\": {{ JSON.stringify($json.message) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1400,
        500
      ],
      "id": "5669bab4-6b99-48bd-a355-c38683b86a02",
      "name": "Send WhatsApp Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://waapi.app/api/v1/instances/76556/client/action/send-typing",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer RnfskkYrbR0Sh2Acnr5B9GwPDl545m1jPPKDbccoa2ab2e89"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chatId\": \"{{ $json.body.data.message.from }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3300,
        80
      ],
      "id": "aa804d2e-67b4-43ba-8409-81816ab03e67",
      "name": "send-typing"
    },
    {
      "parameters": {
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e/latest",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2960,
        320
      ],
      "id": "33a3c9b1-1232-401c-86a2-f70ef83715cc",
      "name": "Read JSONBin"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.sessions }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2080,
        120
      ],
      "id": "57877b6f-107a-482a-bc58-ded4bcfdc0b6",
      "name": "Write JSONBin"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "232f6117-6d57-40c2-a834-115089cb6dca",
              "leftValue": "={{ $json.skipAPI }}",
              "rightValue": "=true",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2680,
        600
      ],
      "id": "db321776-9c90-42cb-9d7f-a15e9b16e8d7",
      "name": "API Decision"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "dni-validation-condition-simple",
              "leftValue": "={{ $('Get User Session').first().json.userSession.estado === 'ESPERANDO_DNI' && $json.newEstado === 'ESPERANDO_ESPECIALIDAD' && $json.isValid === true && $json.updateData.dni }}",
              "rightValue": "=true",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2560,
        -60
      ],
      "id": "d5b9f652-53be-415f-be36-ebcba7405c12",
      "name": "DNI Validation Decision"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Update Session - DNI Validation\nconst processData = $json;\nconst chatId = processData.chatId;\nlet newEstado = processData.newEstado;\nlet updateData = processData.updateData;\n\n// Determinar fuente de datos - puede venir de Process Step Logic o Process DNI Validation\nlet sourceNode = null;\ntry {\n  // Intentar obtener datos de Process DNI Validation primero\n  const dniValidationData = $('Process DNI Validation').first();\n  if (dniValidationData && dniValidationData.json) {\n    sourceNode = 'Process DNI Validation';\n    newEstado = dniValidationData.json.newEstado;\n    updateData = dniValidationData.json.updateData;\n    chatId = dniValidationData.json.chatId;\n    console.log('üìã Usando datos de Process DNI Validation');\n  }\n} catch (error) {\n  console.log('‚ùå No se encontraron datos de Process DNI Validation:', error.message);\n}\n\n// Si no hay datos de validaci√≥n DNI, usar Process Step Logic\nif (!sourceNode) {\n  sourceNode = 'Process Step Logic';\n  console.log('üìã Usando datos de Process Step Logic');\n}\n\n// Obtener las sesiones actuales desde JSONBin\nlet allSessions = {};\ntry {\n  const jsonbinData = $('Read JSONBin').first().json;\n  if (jsonbinData && jsonbinData.record) {\n    allSessions = { ...jsonbinData.record };\n  }\n  console.log('=== UPDATE USER SESSION (DNI VALIDATION) ===');\n  console.log('Fuente de datos:', sourceNode);\n  console.log('ChatId a actualizar:', chatId);\n  console.log('Nuevo estado:', newEstado);\n  console.log('Datos a actualizar:', JSON.stringify(updateData, null, 2));\n  console.log('Sesiones existentes:', Object.keys(allSessions).length);\n} catch (error) {\n  console.error('Error obteniendo sesiones de JSONBin:', error);\n}\n\n// Actualizar o crear la sesi√≥n del usuario\nallSessions[chatId] = {\n  chatId: chatId,\n  estado: newEstado,\n  datos: updateData,\n  createdAt: allSessions[chatId]?.createdAt || new Date().toISOString(),\n  lastActivity: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\nconsole.log('=== SESI√ìN ACTUALIZADA (DNI VALIDATION) ===');\nconsole.log('Sesi√≥n del usuario:', JSON.stringify(allSessions[chatId], null, 2));\nconsole.log('Total sesiones despu√©s de actualizar:', Object.keys(allSessions).length);\nconsole.log('============================================');\n\n// Preparar estructura para JSONBin\nconst jsonbinPayload = {\n  sessions: allSessions\n};\n\nreturn {\n  json: jsonbinPayload\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1560,
        100
      ],
      "id": "84835346-445b-4f87-bcf3-d9a857ea3d8a",
      "name": "Update Session - DNI Validation"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.sessions }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1160,
        40
      ],
      "id": "ff5e4395-fdc2-413f-a12d-d09a6355d3f2",
      "name": "Write JSONBin 2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Format DNI Validation Response - CORREGIDO\nlet finalMessage = \"\";\nlet chatId = \"\";\n\n// Obtener datos de la validaci√≥n del DNI\ntry {\n  const dniValidationData = $('Process DNI Validation').first().json;\n  chatId = dniValidationData.chatId;\n  finalMessage = dniValidationData.response.message;\n  \n  console.log('=== FORMAT DNI VALIDATION RESPONSE - FIXED ===');\n  console.log('ChatId:', chatId);\n  console.log('Message:', finalMessage);\n  console.log('Continue Flow:', dniValidationData.continueFlow);\n  console.log('==============================================');\n  \n} catch (error) {\n  console.error('Error obteniendo datos de DNI Validation:', error);\n  chatId = \"unknown\";\n  finalMessage = \"Error procesando validaci√≥n de DNI\";\n}\n\n// CR√çTICO: LIMPIEZA M√çNIMA Y SEGURA DE CARACTERES - SIN JSON.stringify\nlet cleanedMessage = finalMessage\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\") // Solo quitar negritas dobles\n  .replace(/\\*(.*?)\\*/g, \"$1\");    // Solo quitar negritas simples\n\n// NO USAR JSON.stringify QUE ESCAPA CARACTERES ESPECIALES\n// cleanedMessage = JSON.stringify(cleanedMessage).slice(1, -1); // ‚ùå REMOVIDO\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: cleanedMessage,\n    messageType: \"text\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -820,
        140
      ],
      "id": "1c558c47-9be4-4c21-9d4b-06b8d791e903",
      "name": "Format DNI Validation Response"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/paciente-by-documento/{{ $('Process Step Logic').first().json.updateData.dni }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Set Shared Token').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1940,
        -100
      ],
      "id": "b87fc77e-e335-4f31-98bb-f7aab009b12f",
      "name": "DNI Validation Request"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Process DNI Validation Response\nconst dniValidationResponse = $json;\nconst processStepData = $('Process Step Logic').first().json;\nconst maestros = $('Format Maestros').first().json;\n\n// Obtener DNI desde m√∫ltiples fuentes para mayor robustez\nlet dni = processStepData.updateData?.dni;\nif (!dni) {\n  const getUserSessionData = $('Get User Session').first().json;\n  dni = getUserSessionData.messageText?.replace(/[^0-9]/g, '');\n}\n\nconsole.log('=== DNI VALIDATION RESPONSE ===');\nconsole.log('DNI being validated:', dni);\nconsole.log('API Response:', JSON.stringify(dniValidationResponse, null, 2));\nconsole.log('Process Step Data:', JSON.stringify(processStepData, null, 2));\nconsole.log('==============================');\n\nlet continueFlow = false;\nlet responseMessage = \"\";\nlet newEstado = processStepData.newEstado;\nlet pacienteInfo = null;\n\n// Verificar si el DNI fue encontrado en la API\nif (dniValidationResponse && (dniValidationResponse.id || dniValidationResponse.idPaciente)) {\n  // Paciente encontrado\n  pacienteInfo = dniValidationResponse;\n  continueFlow = true;\n  \n  console.log('‚úÖ PACIENTE ENCONTRADO:', {\n    id: pacienteInfo.id || pacienteInfo.idPaciente,\n    nombre: pacienteInfo.nombre,\n    apellido: pacienteInfo.apellido,\n    dni: dni\n  });\n  \n  // Obtener especialidades del maestro\n  const especialidades = maestros.especialidades;\n  \n  let nombreCompleto = [pacienteInfo.nombre, pacienteInfo.apellido].filter(Boolean).join(' ');\n  let especialidadesText = `üëã ¬°Hola ${nombreCompleto}!\\n\\nüë®‚Äç‚öïÔ∏è *Seleccione una especialidad:*\\n\\n`;\n  especialidades.forEach(esp => {\n    especialidadesText += `${esp.idEspecialidad}. ${esp.descripcion}\\n`;\n  });\n  \n  responseMessage = especialidadesText;\n  newEstado = \"ESPERANDO_ESPECIALIDAD\";\n  \n} else {\n  // Paciente no encontrado\n  continueFlow = false;\n  \n  console.log('‚ùå PACIENTE NO ENCONTRADO para DNI:', dni);\n  console.log('API Response details:', {\n    hasResponse: !!dniValidationResponse,\n    responseKeys: dniValidationResponse ? Object.keys(dniValidationResponse) : [],\n    responseType: typeof dniValidationResponse\n  });\n  \n  responseMessage = `‚ùå *Paciente no encontrado*\\n\\n` +\n                   `No se encontr√≥ un paciente registrado con el DNI: ${dni}\\n\\n` +\n                   `Por favor verifique el n√∫mero de documento o consulte en recepci√≥n para registrarse.\\n\\n` +\n                   `Si necesita agendar un turno con otro DNI, env√≠e cualquier mensaje para comenzar nuevamente.`;\n  newEstado = \"INICIO\"; // Reiniciar el flujo\n}\n\n// APLICAR LIMPIEZA DE CARACTERES\nlet cleanedResponse = responseMessage\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\n// Asegurar que el DNI est√© en updateData para flujos posteriores\nlet finalUpdateData = continueFlow ? {\n  ...processStepData.updateData,\n  dni: dni, // Asegurar que el DNI est√© presente\n  pacienteInfo: pacienteInfo\n} : {}; // Limpiar datos si no se encuentra el paciente\n\nreturn {\n  json: {\n    chatId: processStepData.chatId,\n    continueFlow: continueFlow,\n    response: {\n      message: cleanedResponse,\n      sendToAPI: false\n    },\n    newEstado: newEstado,\n    updateData: finalUpdateData,\n    pacienteInfo: pacienteInfo,\n    isValid: true,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1740,
        0
      ],
      "id": "e7dc032a-b356-46f0-afe7-564058843b9d",
      "name": "Process DNI Validation"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "especialidad-selection-condition",
              "leftValue": "={{ $('Get User Session').first().json.userSession.estado === 'ESPERANDO_ESPECIALIDAD' && $json.newEstado === 'ESPERANDO_DIA' && $json.isValid === true && $json.updateData.especialidad }}",
              "rightValue": "=true",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2420,
        -200
      ],
      "id": "7457906d-3a15-4fe8-8884-4686384a53a4",
      "name": "Especialidad Selection Decision"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/dias?idEspecialidad={{ $('Process Step Logic').first().json.updateData.especialidad.idEspecialidad }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Set Shared Token').first().json.token }}"
            },
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1740,
        -200
      ],
      "id": "89a4d7f8-80b5-452b-81e6-4c18bb828ec1",
      "name": "Get Dias"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/rangos-horarios?idEspecialidad={{ $('Process Step Logic').first().json.updateData.especialidad.idEspecialidad }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Set Shared Token').first().json.token }}"
            },
            {
              "name": "accept",
              "value": "*/*"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1400,
        -200
      ],
      "id": "afc8709c-c2b2-49ce-967f-488f75331e75",
      "name": "Get Rangos Horarios"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Process Dynamic Maestros - CORRECCI√ìN CR√çTICA PARA FORMATEO DE D√çAS\nconst especialidades = $('Format Maestros').first().json.especialidades;\nconst dias = $('Get Dias').first().json;\nconst rangosHorarios = $('Get Rangos Horarios').first().json;\nconst processStepData = $('Process Step Logic').first().json;\n\nconsole.log('=== PROCESS DYNAMIC MAESTROS - CRITICAL FIX ===');\nconsole.log('Especialidades:', JSON.stringify(especialidades, null, 2));\nconsole.log('Dias from API (RAW):', JSON.stringify(dias, null, 2));\nconsole.log('Rangos Horarios from API (RAW):', JSON.stringify(rangosHorarios, null, 2));\nconsole.log('Process Step Data:', JSON.stringify(processStepData, null, 2));\nconsole.log('============================================');\n\n// CR√çTICO: Convertir d√≠as de array a objeto con formato esperado\nlet diasObj = {};\nif (Array.isArray(dias)) {\n  console.log('üîß Processing ARRAY of dias:', dias.length, 'items');\n  dias.forEach((dia, index) => {\n    if (dia && typeof dia === 'object') {\n      const diaId = dia.idTipoDia;\n      const diaDesc = dia.descripcion;\n      \n      console.log(`Processing d√≠a ${index}:`, {\n        id: diaId,\n        descripcion: diaDesc,\n        fullObject: JSON.stringify(dia)\n      });\n      \n      if (diaId && diaDesc) {\n        diasObj[diaId] = diaDesc;\n        console.log(`‚úÖ Added d√≠a: ${diaId} -> ${diaDesc}`);\n      } else {\n        console.log(`‚ùå Invalid d√≠a object:`, dia);\n      }\n    }\n  });\n} else if (typeof dias === 'object' && dias !== null) {\n  console.log('üîß Processing OBJECT dias');\n  diasObj = dias;\n} else {\n  console.log('‚ùå Invalid dias format, using empty object');\n  diasObj = {};\n}\n\n// CR√çTICO: Convertir rangos horarios de array a objeto con formato esperado Y ELIMINAR DUPLICADOS\nlet rangosHorariosObj = {};\nif (Array.isArray(rangosHorarios)) {\n  console.log('üîß Processing ARRAY of rangos horarios:', rangosHorarios.length, 'items');\n  \n  // Usar Map para eliminar duplicados bas√°ndose en idRangoHorario\n  const uniqueRangos = new Map();\n  rangosHorarios.forEach((rango, index) => {\n    if (rango && typeof rango === 'object') {\n      const rangoId = rango.idRangoHorario;\n      const rangoDesc = rango.descripcion;\n      \n      console.log(`Processing rango ${index}:`, {\n        id: rangoId,\n        descripcion: rangoDesc,\n        isDuplicate: uniqueRangos.has(rangoId)\n      });\n      \n      if (rangoId && rangoDesc) {\n        if (!uniqueRangos.has(rangoId)) {\n          uniqueRangos.set(rangoId, rangoDesc);\n          rangosHorariosObj[rangoId] = rangoDesc;\n          console.log(`‚úÖ Added unique rango: ${rangoId} -> ${rangoDesc}`);\n        } else {\n          console.log(`üîÑ Skipped duplicate rango: ${rangoId} -> ${rangoDesc}`);\n        }\n      } else {\n        console.log(`‚ùå Invalid rango object:`, rango);\n      }\n    }\n  });\n  \n  console.log(`üìä Duplicates removed: ${rangosHorarios.length} -> ${uniqueRangos.size} unique items`);\n} else if (typeof rangosHorarios === 'object' && rangosHorarios !== null) {\n  console.log('üîß Processing OBJECT rangos horarios');\n  rangosHorariosObj = rangosHorarios;\n} else {\n  console.log('‚ùå Invalid rangos horarios format, using empty object');\n  rangosHorariosObj = {};\n}\n\n// VALIDACI√ìN CR√çTICA DEL OBJETO D√çAS\nconsole.log('=== CRITICAL VALIDATION OF DIAS OBJECT ===');\nconsole.log('Final Dias object:', JSON.stringify(diasObj, null, 2));\nconsole.log('Dias object type:', typeof diasObj);\nconsole.log('Dias object keys:', Object.keys(diasObj));\nconsole.log('Dias object values:', Object.values(diasObj));\nconsole.log('Final Rangos Horarios object (without duplicates):', JSON.stringify(rangosHorariosObj, null, 2));\nconsole.log('=========================================');\n\n// Crear el objeto maestros completo con datos din√°micos\nconst maestrosDinamicos = {\n  especialidades: especialidades,\n  dias: diasObj,\n  rangosHorarios: rangosHorariosObj\n};\n\n// CR√çTICO: Generar respuesta con d√≠as para el usuario - FORMATO CORRECTO GARANTIZADO\nlet diasText = \"üìÖ Seleccione uno o m√°s d√≠as:\\n\\n\";\nconst diasKeys = Object.keys(diasObj);\n\nconsole.log('=== GENERATING DIAS TEXT - CRITICAL DEBUG ===');\nconsole.log('Dias keys to process:', diasKeys);\nconsole.log('Dias keys length:', diasKeys.length);\nconsole.log('Dias keys type:', typeof diasKeys);\nconsole.log('Is diasKeys array:', Array.isArray(diasKeys));\n\nif (diasKeys.length > 0) {\n  // DEPURACI√ìN CR√çTICA: Verificar cada iteraci√≥n\n  for (let i = 0; i < diasKeys.length; i++) {\n    const key = diasKeys[i];\n    const description = diasObj[key];\n    \n    console.log(`üîç Processing key ${i}: \"${key}\" -> \"${description}\"`);\n    console.log(`   Key type: ${typeof key}, Description type: ${typeof description}`);\n    \n    if (key && description) {\n      const line = `${key}. ${description}\\n`;\n      diasText += line;\n      console.log(`   ‚úÖ Added line: \"${line.trim()}\"`);\n    } else {\n      console.log(`   ‚ùå INVALID: key=\"${key}\", description=\"${description}\"`);\n    }\n  }\n} else {\n  console.log('‚ùå NO DIAS KEYS FOUND - Adding fallback message');\n  diasText += \"No hay d√≠as disponibles\\n\";\n}\n\ndiasText += \"\\nüí° Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas\\n\";\ndiasText += \"Ejemplo: 1,3,5\";\n\nconsole.log('=== FINAL DIAS TEXT - CRITICAL VERIFICATION ===');\nconsole.log('Complete message length:', diasText.length);\nconsole.log('Complete message:');\nconsole.log('\"' + diasText + '\"');\nconsole.log('Message contains expected pattern (9. Martes):', diasText.includes('9. Martes'));\nconsole.log('Message contains expected pattern (10. Jueves):', diasText.includes('10. Jueves'));\nconsole.log('===============================================');\n\n// APLICAR LIMPIEZA DE CARACTERES M√çNIMA\nlet cleanedResponse = diasText\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\") // Solo quitar negritas dobles\n  .replace(/\\*(.*?)\\*/g, \"$1\");    // Solo quitar negritas simples\n\nconsole.log('=== CLEANED RESPONSE - FINAL VERIFICATION ===');\nconsole.log('After cleaning:');\nconsole.log('\"' + cleanedResponse + '\"');\nconsole.log('Cleaned contains expected pattern (9. Martes):', cleanedResponse.includes('9. Martes'));\nconsole.log('Cleaned contains expected pattern (10. Jueves):', cleanedResponse.includes('10. Jueves'));\nconsole.log('============================================');\n\nreturn {\n  json: {\n    chatId: processStepData.chatId,\n    maestrosDinamicos: maestrosDinamicos,\n    response: {\n      message: cleanedResponse,\n      sendToAPI: false\n    },\n    newEstado: \"ESPERANDO_DIA\",\n    updateData: processStepData.updateData,\n    isValid: true,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1060,
        -200
      ],
      "id": "a4e6c288-4a85-4447-b07a-d562246f59a3",
      "name": "Process Dynamic Maestros"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Update Session - Dynamic Maestros - MEJORADO CON VALIDACI√ìN\nconst processData = $json;\nconst chatId = processData.chatId;\nconst newEstado = processData.newEstado;\nconst updateData = processData.updateData;\nconst maestrosDinamicos = processData.maestrosDinamicos;\n\n// Validaci√≥n de datos de entrada\nif (!chatId || !newEstado || !maestrosDinamicos) {\n  console.error('‚ùå DATOS FALTANTES en Update Session - Dynamic Maestros');\n  console.error('chatId:', chatId);\n  console.error('newEstado:', newEstado);\n  console.error('maestrosDinamicos existe:', !!maestrosDinamicos);\n  return {\n    json: {\n      error: \"Datos faltantes para actualizar sesi√≥n con maestros din√°micos\"\n    }\n  };\n}\n\n// Obtener las sesiones actuales desde JSONBin\nlet allSessions = {};\ntry {\n  const jsonbinData = $('Read JSONBin').first().json;\n  if (jsonbinData && jsonbinData.record) {\n    allSessions = { ...jsonbinData.record };\n  }\n  console.log('=== UPDATE SESSION - DYNAMIC MAESTROS ENHANCED ===');\n  console.log('ChatId a actualizar:', chatId);\n  console.log('Nuevo estado:', newEstado);\n  console.log('Datos a actualizar:', JSON.stringify(updateData, null, 2));\n  console.log('Maestros din√°micos validados:');\n  console.log('  - Especialidades:', maestrosDinamicos.especialidades?.length || 0);\n  console.log('  - D√≠as:', Object.keys(maestrosDinamicos.dias || {}).length);\n  console.log('  - Rangos horarios:', Object.keys(maestrosDinamicos.rangosHorarios || {}).length);\n  console.log('=============================================');\n} catch (error) {\n  console.error('Error obteniendo sesiones de JSONBin:', error);\n}\n\n// Validar estructura de maestros din√°micos\nconst validatedMaestrosDinamicos = {\n  especialidades: maestrosDinamicos.especialidades || [],\n  dias: maestrosDinamicos.dias || {},\n  rangosHorarios: maestrosDinamicos.rangosHorarios || {}\n};\n\n// Validaci√≥n adicional: asegurar que d√≠as y rangos horarios no est√©n vac√≠os\nconst diasCount = Object.keys(validatedMaestrosDinamicos.dias).length;\nconst horariosCount = Object.keys(validatedMaestrosDinamicos.rangosHorarios).length;\n\nconsole.log('=== VALIDACI√ìN MAESTROS DIN√ÅMICOS ===');\nconsole.log('D√≠as procesados:', diasCount);\nconsole.log('Rangos horarios procesados:', horariosCount);\nconsole.log('D√≠as objeto:', JSON.stringify(validatedMaestrosDinamicos.dias, null, 2));\nconsole.log('Rangos objeto:', JSON.stringify(validatedMaestrosDinamicos.rangosHorarios, null, 2));\nconsole.log('===================================');\n\nif (diasCount === 0 || horariosCount === 0) {\n  console.warn('‚ö†Ô∏è ADVERTENCIA: Maestros din√°micos incompletos');\n  console.warn('D√≠as:', diasCount, 'Horarios:', horariosCount);\n}\n\n// Actualizar la sesi√≥n del usuario\nallSessions[chatId] = {\n  chatId: chatId,\n  estado: newEstado,\n  datos: updateData,\n  maestrosDinamicos: validatedMaestrosDinamicos, // Guardar los maestros din√°micos validados\n  createdAt: allSessions[chatId]?.createdAt || new Date().toISOString(),\n  lastActivity: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\nconsole.log('=== SESI√ìN ACTUALIZADA (DYNAMIC MAESTROS ENHANCED) ===');\nconsole.log('Sesi√≥n del usuario actualizada exitosamente');\nconsole.log('Total sesiones despu√©s de actualizar:', Object.keys(allSessions).length);\nconsole.log('Estado final de la sesi√≥n:', allSessions[chatId].estado);\nconsole.log('Maestros din√°micos almacenados correctamente');\nconsole.log('====================================================');\n\n// Preparar estructura para JSONBin\nconst jsonbinPayload = {\n  sessions: allSessions\n};\n\nreturn {\n  json: jsonbinPayload\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        -200
      ],
      "id": "cae9030e-d2b9-49e5-95b6-f39fddf1b429",
      "name": "Update Session - Dynamic Maestros"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.sessions }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -380,
        -200
      ],
      "id": "86ce6abf-583a-4c28-be06-59798e673196",
      "name": "Write JSONBin - Dynamic Maestros"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Format Dynamic Maestros Response - CORRECCI√ìN CR√çTICA\nlet finalMessage = \"\";\nlet chatId = \"\";\n\n// Obtener datos del proceso din√°mico de maestros\ntry {\n  const dynamicMaestrosData = $('Process Dynamic Maestros').first().json;\n  chatId = dynamicMaestrosData.chatId;\n  finalMessage = dynamicMaestrosData.response.message;\n  \n  console.log('=== FORMAT DYNAMIC MAESTROS RESPONSE - FIXED ===');\n  console.log('ChatId:', chatId);\n  console.log('Original Message from Process:', JSON.stringify(finalMessage));\n  console.log('Message length:', finalMessage.length);\n  console.log('Message contains expected pattern (9. Martes):', finalMessage.includes('9. Martes'));\n  console.log('Message contains expected pattern (10. Jueves):', finalMessage.includes('10. Jueves'));\n  console.log('==============================================');\n  \n} catch (error) {\n  console.error('Error obteniendo datos de Dynamic Maestros:', error);\n  chatId = \"unknown\";\n  finalMessage = \"Error procesando datos din√°micos\";\n}\n\n// CR√çTICO: LIMPIEZA M√çNIMA Y SEGURA DE CARACTERES\n// Solo aplicar la limpieza m√≠nima necesaria sin usar JSON.stringify que escapa caracteres\nlet cleanedMessage = finalMessage\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\") // Solo quitar negritas dobles\n  .replace(/\\*(.*?)\\*/g, \"$1\");    // Solo quitar negritas simples\n\n// NO USAR JSON.stringify QUE ESCAPA CARACTERES ESPECIALES\n// cleanedMessage = JSON.stringify(cleanedMessage).slice(1, -1); // ‚ùå REMOVIDO\n\nconsole.log('=== CLEANED MESSAGE - FINAL VERIFICATION ===');\nconsole.log('After cleaning:', JSON.stringify(cleanedMessage));\nconsole.log('Cleaned length:', cleanedMessage.length);\nconsole.log('Cleaned contains expected pattern (9. Martes):', cleanedMessage.includes('9. Martes'));\nconsole.log('Cleaned contains expected pattern (10. Jueves):', cleanedMessage.includes('10. Jueves'));\nconsole.log('==========================================');\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: cleanedMessage,\n    messageType: \"text\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        -200
      ],
      "id": "3cfcf85e-d354-4a27-b394-16cb84f8aa38",
      "name": "Format Dynamic Maestros Response"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "menssageIn",
            "type": "main",
            "index": 0
          },
          {
            "node": "send-typing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "menssageIn": {
      "main": [
        [
          {
            "node": "Read JSONBin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Session": {
      "main": [
        [
          {
            "node": "Process Step Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Step Logic": {
      "main": [
        [
          {
            "node": "DNI Validation Decision",
            "type": "main",
            "index": 0
          },
          {
            "node": "Especialidad Selection Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DNI Validation Decision": {
      "main": [
        [
          {
            "node": "DNI Validation Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update User Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update User Session": {
      "main": [
        [
          {
            "node": "Write JSONBin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare API Request": {
      "main": [
        [
          {
            "node": "API Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Response": {
      "main": [
        [
          {
            "node": "Send WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to API": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read JSONBin": {
      "main": [
        [
          {
            "node": "Get User Session",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Maestros Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write JSONBin": {
      "main": [
        [
          {
            "node": "Prepare API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "API Decision": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DNI Validation Request": {
      "main": [
        [
          {
            "node": "Process DNI Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process DNI Validation": {
      "main": [
        [
          {
            "node": "Update Session - DNI Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Session - DNI Validation": {
      "main": [
        [
          {
            "node": "Write JSONBin 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format DNI Validation Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format DNI Validation Response": {
      "main": [
        [
          {
            "node": "Send WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Maestros Token": {
      "main": [
        [
          {
            "node": "Set Shared Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Shared Token": {
      "main": [
        [
          {
            "node": "Get Especialidades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Especialidades": {
      "main": [
        [
          {
            "node": "Format Maestros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Especialidad Selection Decision": {
      "main": [
        [
          {
            "node": "Get Dias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dias": {
      "main": [
        [
          {
            "node": "Get Rangos Horarios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Rangos Horarios": {
      "main": [
        [
          {
            "node": "Process Dynamic Maestros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Dynamic Maestros": {
      "main": [
        [
          {
            "node": "Update Session - Dynamic Maestros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Session - Dynamic Maestros": {
      "main": [
        [
          {
            "node": "Write JSONBin - Dynamic Maestros",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format Dynamic Maestros Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Dynamic Maestros Response": {
      "main": [
        [
          {
            "node": "Send WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2ac85a72-791a-4240-96d3-a027dbe87f30",
  "meta": {
    "instanceId": "556514cf317cac5c724bf084ccbb32127ff27cc56f225fb39f131295f3c7f3d0"
  },
  "id": "v8eKjjtCYC1WyQw8",
  "tags": []
}
{
  "name": "A_SalmaTurnos",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ac247fd3-9ca7-42a3-8942-7ea8c321c46d",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1940,
        440
      ],
      "id": "06f4a861-6ace-4710-b240-7f14fc79b3d0",
      "name": "Webhook Start",
      "webhookId": "e3b2122c-9d00-4104-b64f-91553cc08f8c"
    },
    {
      "parameters": {
        "jsCode": "// Parse WhatsApp Message\nconst items = $input.all();\nconst message = items[0].json.body.data.message;\n\nif (!message || message.type !== 'chat') {\n  return [{ json: { error: \"Invalid message type\" } }];\n}\n\nconst chatId = message.from;\nconst messageText = message.body?.trim() || \"\";\nconst messageId = message.id;\n\nreturn [{\n  json: {\n    chatId: chatId,\n    messageText: messageText,\n    messageId: messageId,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        500
      ],
      "id": "da81bf1d-c7d5-461d-9ea9-5b8acff48a70",
      "name": "Parse Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/login",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"user\": \"admin\",\n  \"password\": \"1234\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1420,
        240
      ],
      "id": "8bcbe112-4e02-4433-8471-d5bef1409d32",
      "name": "Get Auth Token"
    },
    {
      "parameters": {
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1420,
        560
      ],
      "id": "f788d4b0-7e55-400d-9106-431d9c8db242",
      "name": "Get User Session"
    },
    {
      "parameters": {
        "url": "https://api.salmasalud.com.ar/especialidades",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Auth Token').first().json.token}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1160,
        200
      ],
      "id": "7b1790c2-5da0-43f5-95bc-b0417350810e",
      "name": "Get Especialidades"
    },
    {
      "parameters": {
        "jsCode": "// Process User State and Determine Next Step\nconst chatId = $('Parse Message').first().json.chatId;\nconst messageText = $('Parse Message').first().json.messageText.trim();\nconst token = $('Get Auth Token').first().json.token;\n// FIXED: Use .all() to get all items from the node, then extract the data\nconst especialidadesItems = $('Get Especialidades').all();\nconst especialidades = (especialidadesItems && especialidadesItems.length > 0) ? especialidadesItems[0].json : [];\n\n// Get user session from JSONBin\nlet allSessions = {};\nlet userSession = null;\n\ntry {\n  const jsonbinResponse = $('Get User Session').first().json;\n  if (jsonbinResponse && jsonbinResponse.record && jsonbinResponse.record.sessions) {\n    allSessions = jsonbinResponse.record.sessions;\n    console.log('‚úÖ JSONBin data loaded, total users:', Object.keys(allSessions).length);\n  } else {\n    console.log('‚ö†Ô∏è No existing JSONBin data, creating new structure');\n    allSessions = {};\n  }\n  userSession = allSessions[chatId];\n} catch (error) {\n  console.log('‚ùå Error reading JSONBin, creating new structure:', error.message);\n  allSessions = {};\n}\n\n// Initialize new session if needed\nconst isNewUser = !userSession;\nif (!userSession) {\n  userSession = {\n    chatId: chatId,\n    estado: \"INICIO\",\n    datos: {},\n    createdAt: new Date().toISOString(),\n    lastActivity: new Date().toISOString()\n  };\n  console.log('üÜï Created new user session for:', chatId);\n} else {\n  userSession.lastActivity = new Date().toISOString();\n  console.log('üîÑ Updated existing user session for:', chatId);\n}\n\n// Process based on current state\nlet response = {};\nlet newState = userSession.estado;\nlet updateData = { ...userSession.datos };\nlet isValid = true;\nlet errorMessage = \"\";\nlet needsDniValidation = false;\nlet needsDaysData = false;\nlet needsHoursData = false;\nlet needsApiSubmission = false;\n\n// CRITICAL FIX: Detect if we're transitioning from INICIO/COMPLETADO states\nconst currentState = userSession.estado;\nlet skipDniProcessing = (currentState === \"INICIO\" || currentState === \"COMPLETADO\");\n\n// CRITICAL: If skipDniProcessing is true, we MUST prevent ALL processing nodes from executing\nif (skipDniProcessing) {\n  console.log('üõë SKIP MODE ACTIVE: Preventing all processing operations for state transition from ' + currentState);\n  // Force all processing flags to false to prevent parallel execution of validation nodes\n  needsDniValidation = false;\n  needsDaysData = false;\n  needsHoursData = false;\n  needsApiSubmission = false;\n}\n\nswitch (userSession.estado) {\n  case \"INICIO\":\n  case \"COMPLETADO\":\n    // Start or restart flow - ONLY show welcome message\n    if (userSession.estado === \"COMPLETADO\") {\n      updateData = {}; // Clear previous data\n    }\n    response = {\n      message: \"üè• Bienvenido al Sistema de Turnos\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\"\n    };\n    newState = \"ESPERANDO_DNI\";\n    console.log('üîÑ State transition: ' + currentState + ' -> ESPERANDO_DNI (skipDniProcessing: true)');\n    break;\n\n  case \"ESPERANDO_DNI\":\n    // CRITICAL: Skip DNI processing if we just transitioned from INICIO/COMPLETADO\n    if (skipDniProcessing) {\n      console.log('‚è≠Ô∏è Skipping DNI processing - just transitioned from ' + currentState + ' state');\n      // The user will need to send another message for actual DNI validation\n      // Keep current response (welcome message) and don't process current message as DNI\n      // DO NOT break here - we want to keep the welcome message from the previous case\n      console.log('üìù Keeping welcome message, user needs to send DNI in next message');\n      break;\n    }\n    \n    // Process actual DNI input from user's next message\n    console.log('üîç Processing DNI input: \"' + messageText + '\"');\n    \n    // Clean and validate DNI\n    const cleanDNI = messageText.replace(/[^\\d]/g, '');\n    \n    if (!cleanDNI || cleanDNI.length < 7 || cleanDNI.length > 8) {\n      isValid = false;\n      errorMessage = `‚ùå DNI inv√°lido\\n\\nPor favor ingrese solo n√∫meros, entre 7 y 8 d√≠gitos.\\n\\nFormatos aceptados:\\n‚Ä¢ 25430441\\n‚Ä¢ 25.430.441\\n‚Ä¢ 25 430 441\\n\\nSu entrada: \"${messageText}\"\\nProcesado como: \"${cleanDNI}\"`;\n    } else {\n      updateData.dni = cleanDNI;\n      needsDniValidation = true;\n      newState = \"VALIDANDO_DNI\";\n      response = {\n        message: \"‚è≥ Validando DNI...\"\n      };\n    }\n    break;\n\n  case \"ESPERANDO_ESPECIALIDAD\":\n    const especialidadId = parseInt(messageText);\n    \n    // Ensure especialidades is an array\n    let especialidadesArray = [];\n    if (Array.isArray(especialidades)) {\n      especialidadesArray = especialidades;\n    } else if (especialidades && Array.isArray(especialidades)) {\n      especialidadesArray = especialidades;\n    }\n    \n    const especialidad = especialidadesArray.find(e => e.idEspecialidad === especialidadId);\n    \n    if (!especialidad) {\n      isValid = false;\n      let opciones = especialidadesArray.map(e => `${e.idEspecialidad}. ${e.descripcion}`).join('\\n');\n      errorMessage = `‚ùå No se reconoce el valor ingresado\\n\\nOpciones v√°lidas:\\n${opciones}`;\n    } else {\n      updateData.especialidad = especialidad;\n      needsDaysData = true;\n      newState = \"CARGANDO_DIAS\";\n      response = {\n        message: `‚è≥ Obteniendo d√≠as disponibles para ${especialidad.descripcion}...`\n      };\n    }\n    break;\n\n  case \"ESPERANDO_DIA\":\n    const diaId = parseInt(messageText);\n    if (!updateData.diasDisponibles || !updateData.diasDisponibles[diaId]) {\n      isValid = false;\n      if (updateData.diasDisponibles) {\n        let opciones = Object.keys(updateData.diasDisponibles).map(key => `${key}. ${updateData.diasDisponibles[key]}`).join('\\n');\n        errorMessage = `‚ùå No se reconoce el valor ingresado\\n\\nOpciones v√°lidas:\\n${opciones}`;\n      } else {\n        errorMessage = \"‚ùå Error: D√≠as no cargados. Por favor inicie nuevamente el proceso.\";\n      }\n    } else {\n      updateData.diaSeleccionado = {\n        id: diaId,\n        descripcion: updateData.diasDisponibles[diaId]\n      };\n      needsHoursData = true;\n      newState = \"CARGANDO_HORARIOS\";\n      response = {\n        message: `‚è≥ Obteniendo horarios disponibles para ${updateData.diaSeleccionado.descripcion}...`\n      };\n    }\n    break;\n\n  case \"ESPERANDO_HORARIO\":\n    const horarioId = parseInt(messageText);\n    if (!updateData.horariosDisponibles || !updateData.horariosDisponibles[horarioId]) {\n      isValid = false;\n      if (updateData.horariosDisponibles) {\n        let opciones = Object.keys(updateData.horariosDisponibles).map(key => `${key}. ${updateData.horariosDisponibles[key]}`).join('\\n');\n        errorMessage = `‚ùå No se reconoce el valor ingresado\\n\\nOpciones v√°lidas:\\n${opciones}`;\n      } else {\n        errorMessage = \"‚ùå Error: Horarios no cargados. Por favor inicie nuevamente el proceso.\";\n      }\n    } else {\n      updateData.horarioSeleccionado = {\n        id: horarioId,\n        descripcion: updateData.horariosDisponibles[horarioId]\n      };\n      \n      // Show confirmation\n      const resumen = `üìã Resumen del Turno:\\n\\n` +\n                     `üë§ DNI: ${updateData.dni}\\n` +\n                     `üë®‚Äç‚öïÔ∏è Especialidad: ${updateData.especialidad.descripcion}\\n` +\n                     `üìÖ D√≠a: ${updateData.diaSeleccionado.descripcion}\\n` +\n                     `üïê Horario: ${updateData.horarioSeleccionado.descripcion}\\n\\n` +\n                     `¬øConfirma el turno?\\n\\n` +\n                     `1. ‚úÖ Aceptar\\n` +\n                     `2. ‚ùå Cancelar`;\n      \n      response = {\n        message: resumen\n      };\n      newState = \"CONFIRMACION\";\n    }\n    break;\n\n  case \"CONFIRMACION\":\n    const confirmacion = parseInt(messageText);\n    \n    if (confirmacion === 1) {\n      needsApiSubmission = true;\n      newState = \"ENVIANDO_API\";\n      response = {\n        message: \"‚úÖ Turno confirmado\\n\\nProcesando su solicitud...\"\n      };\n    } else if (confirmacion === 2) {\n      updateData = {};\n      newState = \"INICIO\";\n      response = {\n        message: \"‚ùå Turno cancelado\\n\\n¬øDesea agendar un nuevo turno?\\n\\nEnv√≠e cualquier mensaje para comenzar.\"\n      };\n    } else {\n      isValid = false;\n      errorMessage = \"‚ùå No se reconoce el valor ingresado\\n\\nOpciones v√°lidas:\\n1. ‚úÖ Aceptar\\n2. ‚ùå Cancelar\";\n    }\n    break;\n\n  default:\n    // Unknown state, restart\n    response = {\n      message: \"üè• Bienvenido al Sistema de Turnos\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\"\n    };\n    newState = \"ESPERANDO_DNI\";\n    updateData = {};\n}\n\n// Update session data\nallSessions[chatId] = {\n  chatId: chatId,\n  estado: isValid ? newState : userSession.estado,\n  datos: isValid ? updateData : userSession.datos,\n  createdAt: userSession.createdAt,\n  lastActivity: new Date().toISOString()\n};\n\n// Clean message for WhatsApp\nlet finalMessage = isValid ? response.message : errorMessage;\nlet cleanedMessage = finalMessage\n\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    isValid: isValid,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    token: token,\n    needsDniValidation: needsDniValidation,\n    needsDaysData: needsDaysData,\n    needsHoursData: needsHoursData,\n    needsApiSubmission: needsApiSubmission,\n    currentState: isValid ? newState : userSession.estado,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1160,
        540
      ],
      "id": "54a428c3-a939-4c14-9499-ffd2d2fb9bec",
      "name": "Process State Logic"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "dni-validation",
              "leftValue": "={{ $json.needsDniValidation }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        240
      ],
      "id": "d19067ca-39dd-49f0-8a43-fd59447a1e17",
      "name": "Check DNI Validation"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/paciente-by-documento/{{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.dni }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        160
      ],
      "id": "5a70ab52-359c-43ea-ae7c-3584e4592172",
      "name": "Validate DNI",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Process DNI Validation Result\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\n// Get especialidades with validation\nlet especialidades = [];\ntry {\n  // FIXED: Use .all() instead of .first().json to get all items from the node\n  const especialidadesItems = $('Get Especialidades').all();\n  \n  console.log('üìä Get Especialidades items count:', especialidadesItems.length);\n  \n  let especialidadesResponse = null;\n  if (especialidadesItems && especialidadesItems.length > 0) {\n    // Extract the actual data from the first item's json property\n    especialidadesResponse = especialidadesItems[0].json;\n  } else {\n    console.log('‚ö†Ô∏è No items returned from Get Especialidades node');\n    especialidadesResponse = null;\n  }\n  \n  console.log('üìä Raw especialidades response:', JSON.stringify(especialidadesResponse, null, 2));\n  \n  // Only process if we have valid response data\n  if (!especialidadesResponse) {\n    console.log('‚ö†Ô∏è No especialidades data available');\n    especialidades = [];\n  } else if (Array.isArray(especialidadesResponse)) {\n    especialidades = especialidadesResponse;\n  } else if (especialidadesResponse && typeof especialidadesResponse === 'object') {\n    // If it's wrapped in an object, try to extract the array\n    if (especialidadesResponse.data && Array.isArray(especialidadesResponse.data)) {\n      especialidades = especialidadesResponse.data;\n    } else if (especialidadesResponse.especialidades && Array.isArray(especialidadesResponse.especialidades)) {\n      especialidades = especialidadesResponse.especialidades;\n    } else if (especialidadesResponse.idEspecialidad) {\n      // Single specialty object\n      especialidades = [especialidadesResponse];\n    }\n  }\n  \n  console.log('‚úÖ Especialidades processed:', especialidades.length + ' items');\n  console.log('üìã Especialidades array:', JSON.stringify(especialidades, null, 2));\n} catch (error) {\n  console.log('‚ùå Error processing especialidades:', error.message);\n  especialidades = [];\n}\n\n// Check if DNI validation was successful\nlet dniValid = false;\nlet errorMessage = \"\";\n\ntry {\n  const dniResponse = $('Validate DNI').first().json;\n  if (dniResponse && (dniResponse.idPaciente || dniResponse.id)) {\n    dniValid = true;\n    // Store patient data\n    allSessions[chatId].datos.paciente = dniResponse;\n  } else {\n    errorMessage = \"‚ùå DNI no encontrado en el sistema\\n\\nPor favor verifique el n√∫mero ingresado o comun√≠quese con la cl√≠nica para registrarse.\";\n  }\n} catch (error) {\n  console.log('DNI Validation Error:', error.message);\n  errorMessage = \"‚ùå Error validando DNI\\n\\nPor favor intente nuevamente o verifique el n√∫mero ingresado.\";\n}\n\nlet responseMessage = \"\";\n\nif (dniValid) {\n  // Show specialties\n  allSessions[chatId].estado = \"ESPERANDO_ESPECIALIDAD\";\n  \n  // Extract patient name from API response\n  const pacienteData = allSessions[chatId].datos.paciente;\n  let patientName = \"\";\n  \n  // Try different possible name fields from the API response\n  if (pacienteData) {\n    patientName = pacienteData.nombre || \n                 pacienteData.name || \n                 pacienteData.nombreCompleto || \n                 pacienteData.fullName || \n                 pacienteData.nombrePaciente || \n                 pacienteData.nombreApellido || \n                 pacienteData.apellidoNombre || \n                 \"\";\n  }\n  \n  // Build the welcome message with or without name\n  let especialidadesText = \"\";\n  if (patientName && patientName.trim() !== \"\") {\n    especialidadesText = `üëã ¬°Hola ${patientName.trim()}!\\n\\nüë®‚Äç‚öïÔ∏è Seleccione una especialidad:\\n\\n`;\n  } else {\n    especialidadesText = \"üë®‚Äç‚öïÔ∏è Seleccione una especialidad:\\n\\n\";\n  }\n  \n  // Validate especialidades is an array before forEach\n  if (Array.isArray(especialidades) && especialidades.length > 0) {\n    console.log('üîÑ Building especialidades list with', especialidades.length, 'items');\n    \n    // CRITICAL FIX: Build the list directly without intermediate variable\n    // Process each specialty and append immediately\n    especialidades.forEach((esp, index) => {\n      console.log(`Processing specialty ${index + 1}/${especialidades.length}:`, esp);\n      if (esp && esp.idEspecialidad && esp.descripcion) {\n        // Append directly to especialidadesText to avoid string concatenation issues\n        especialidadesText += `${esp.idEspecialidad}. ${esp.descripcion}\\n`;\n        console.log(`‚úÖ Added specialty: ${esp.idEspecialidad}. ${esp.descripcion}`);\n        console.log(`üìù Current text length: ${especialidadesText.length}`);\n      } else {\n        console.log('‚ö†Ô∏è Invalid specialty object at index', index, ':', esp);\n      }\n    });\n    \n    console.log(`üìä Final especialidades text (${especialidadesText.length} chars):`);\n    console.log('üìù Final text content:', especialidadesText);\n  } else {\n    console.log('‚ö†Ô∏è No especialidades available or invalid format. Data:', especialidades);\n    especialidadesText += \"‚ùå No hay especialidades disponibles en este momento.\\n\\nPor favor intente m√°s tarde.\";\n    // Keep in DNI validation state to allow retry\n    allSessions[chatId].estado = \"ESPERANDO_DNI\";\n  }\n  \n  responseMessage = especialidadesText;\n} else {\n  // Keep in DNI state with error\n  allSessions[chatId].estado = \"ESPERANDO_DNI\";\n  responseMessage = errorMessage;\n}\n\n// CRITICAL FIX: Simplified message cleaning - avoid aggressive regex that might truncate content\nlet cleanedMessage = responseMessage\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")  // Remove markdown bold\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");       // Clean list items\n\nreturn [{\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    dniValid: dniValid,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        180
      ],
      "id": "19b8b36b-e825-4667-9e76-14b5a1cd9d5b",
      "name": "Process DNI Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "days-data",
              "leftValue": "={{ $('Process State Logic').first().json.needsDaysData }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        440
      ],
      "id": "0e1462c1-01d1-4e6e-9a41-c3204399317d",
      "name": "Check Days Data"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/dias?idEspecialidad={{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        440
      ],
      "id": "8e5142ac-8d6e-4002-a762-1c7c2d1c0692",
      "name": "Get Days"
    },
    {
      "parameters": {
        "jsCode": "// Process Days Data\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\n// Get days from API response\nconst diasResponse = $('Get Days').first().json;\nlet diasObj = {};\n\n// Process days - expecting array with idTipoDia and descripcion\nif (Array.isArray(diasResponse)) {\n  diasResponse.forEach(dia => {\n    if (dia.idTipoDia && dia.descripcion) {\n      diasObj[dia.idTipoDia] = dia.descripcion;\n    }\n  });\n} else if (diasResponse && typeof diasResponse === 'object') {\n  // If it's already an object, use it directly\n  diasObj = diasResponse;\n}\n\n// Store days data in session\nallSessions[chatId].datos.diasDisponibles = diasObj;\nallSessions[chatId].estado = \"ESPERANDO_DIA\";\n\n// Format days for display\nlet diasText = \"üìÖ Seleccione un d√≠a:\\n\\n\";\nObject.keys(diasObj).forEach(key => {\n  diasText += `${key}. ${diasObj[key]}\\n`;\n});\n\n// Clean message for WhatsApp\nlet cleanedMessage = diasText\n\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        440
      ],
      "id": "4b60e6cd-9761-44c5-b2da-39b78e4e6e3d",
      "name": "Process Days Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "hours-data",
              "leftValue": "={{ $('Process State Logic').first().json.needsHoursData }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        660
      ],
      "id": "f7c45435-e9b2-43ba-b7d9-08ed56444f6b",
      "name": "Check Hours Data"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/rangos-horarios?idEspecialidad={{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        660
      ],
      "id": "f52ec25a-2674-457f-bc6c-09fec96a0755",
      "name": "Get Hours"
    },
    {
      "parameters": {
        "jsCode": "// Process Hours Data\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\n// Get hours from API response\nconst horariosResponse = $('Get Hours').first().json;\nlet horariosObj = {};\n\n// Process hours - expecting array with idRangoHorario and descripcion\nif (Array.isArray(horariosResponse)) {\n  horariosResponse.forEach(horario => {\n    if (horario.idRangoHorario && horario.descripcion) {\n      horariosObj[horario.idRangoHorario] = horario.descripcion;\n    }\n  });\n} else if (horariosResponse && typeof horariosResponse === 'object') {\n  // If it's already an object, use it directly\n  horariosObj = horariosResponse;\n}\n\n// Store hours data in session\nallSessions[chatId].datos.horariosDisponibles = horariosObj;\nallSessions[chatId].estado = \"ESPERANDO_HORARIO\";\n\n// Format hours for display\nlet horariosText = \"üïê Seleccione un horario:\\n\\n\";\nObject.keys(horariosObj).forEach(key => {\n  horariosText += `${key}. ${horariosObj[key]}\\n`;\n});\n\n// Clean message for WhatsApp\nlet cleanedMessage = horariosText\n\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        660
      ],
      "id": "5326c53e-6f30-4d86-b0cf-45ee22b303e7",
      "name": "Process Hours Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "api-submission",
              "leftValue": "={{ $('Process State Logic').first().json.needsApiSubmission }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        860
      ],
      "id": "73b87f81-c6bf-462a-b3d0-030581397b00",
      "name": "Check API Submission"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "initial-state",
              "leftValue": "={{ $('Process State Logic').first().json.currentState }}",
              "rightValue": "ESPERANDO_DNI",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -860,
        60
      ],
      "id": "a7f055da-e03d-4e34-96f2-7e9ef0391570",
      "name": "Check Initial State"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/solicitar",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"idPaciente\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.paciente.idPaciente || $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.paciente.id }},\n  \"idEspecialidad\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }},\n  \"idTipoDia\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.diaSeleccionado.id }},\n  \"idRangoHorario\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.horarioSeleccionado.id }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        860
      ],
      "id": "af5756ac-64fe-41e1-b412-1ba087a3ebaa",
      "name": "Submit Turno"
    },
    {
      "parameters": {
        "jsCode": "// Process API Submission Result\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\n// Check API response\nlet success = false;\nlet responseMessage = \"\";\n\ntry {\n  const apiResponse = $('Submit Turno').first().json;\n  \n  if (apiResponse && (apiResponse.success || apiResponse.id || apiResponse.idSolicitud)) {\n    success = true;\n    allSessions[chatId].estado = \"COMPLETADO\";\n    \n    const userData = allSessions[chatId].datos;\n    responseMessage = `‚úÖ Turno solicitado exitosamente\\n\\n` +\n                     `üìã Resumen:\\n` +\n                     `üë§ DNI: ${userData.dni}\\n` +\n                     `üë®‚Äç‚öïÔ∏è Especialidad: ${userData.especialidad.descripcion}\\n` +\n                     `üìÖ D√≠a: ${userData.diaSeleccionado.descripcion}\\n` +\n                     `üïê Horario: ${userData.horarioSeleccionado.descripcion}\\n\\n` +\n                     `üìû La cl√≠nica se comunicar√° con usted para confirmar el turno.\\n\\n` +\n                     `üîÑ Para solicitar otro turno, env√≠e cualquier mensaje.`;\n  } else {\n    responseMessage = \"‚ùå Error al procesar la solicitud\\n\\nPor favor intente nuevamente m√°s tarde o comun√≠quese directamente con la cl√≠nica.\";\n    // Keep in confirmation state to allow retry\n    allSessions[chatId].estado = \"CONFIRMACION\";\n  }\n} catch (error) {\n  console.log('API Submission Error:', error.message);\n  responseMessage = \"‚ùå Error al procesar la solicitud\\n\\nPor favor intente nuevamente m√°s tarde o comun√≠quese directamente con la cl√≠nica.\";\n  allSessions[chatId].estado = \"CONFIRMACION\";\n}\n\n// Clean message for WhatsApp\nlet cleanedMessage = responseMessage\n\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    success: success,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        860
      ],
      "id": "12d54b51-38f4-4ccc-aa43-08fc8529d0a8",
      "name": "Process API Result"
    },
    {
      "parameters": {
        "jsCode": "// Merge All Responses\nconst stateData = $('Process State Logic').first().json;\n\n// Check if we have responses from other nodes\nlet finalResponse = stateData.response;\nlet finalAllSessions = stateData.allSessions;\n\n// Check for DNI validation result\ntry {\n  const dniResult = $('Process DNI Result').first()?.json;\n  if (dniResult && dniResult.response) {\n    finalResponse = dniResult.response;\n    finalAllSessions = dniResult.allSessions;\n  }\n} catch (error) {\n  // No DNI result, continue\n}\n\n// Check for days result\ntry {\n  const daysResult = $('Process Days Result').first()?.json;\n  if (daysResult && daysResult.response) {\n    finalResponse = daysResult.response;\n    finalAllSessions = daysResult.allSessions;\n  }\n} catch (error) {\n  // No days result, continue\n}\n\n// Check for hours result\ntry {\n  const hoursResult = $('Process Hours Result').first()?.json;\n  if (hoursResult && hoursResult.response) {\n    finalResponse = hoursResult.response;\n    finalAllSessions = daysResult.allSessions;\n  }\n} catch (error) {\n  // No hours result, continue\n}\n\n// Check for API submission result\ntry {\n  const apiResult = $('Process API Result').first()?.json;\n  if (apiResult && apiResult.response) {\n    finalResponse = apiResult.response;\n    finalAllSessions = apiResult.allSessions;\n  }\n} catch (error) {\n  // No API result, continue\n}\n\nreturn {\n  json: {\n    chatId: stateData.chatId,\n    response: finalResponse,\n    allSessions: finalAllSessions,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -140,
        580
      ],
      "id": "2bba3e76-117c-482a-9478-d5efc0277d64",
      "name": "Merge Responses"
    },
    {
      "parameters": {
        "jsCode": "// Update Session - MANEJO DE USUARIOS NUEVOS\nconst mergeData = $('Merge Responses').first().json;\nconst chatId = mergeData.chatId;\nconst newState = mergeData.allSessions[chatId]?.estado;\nconst sessionData = mergeData.allSessions[chatId]?.datos;\n\n// Obtener JSONBin actual o crear estructura vac√≠a si no existe\nlet allSessions = {};\ntry {\n  // En este punto ya tenemos los datos procesados de mergeData\n  allSessions = mergeData.allSessions;\n  console.log('‚úÖ JSONBin data loaded, total users:', Object.keys(allSessions).length);\n} catch (error) {\n  console.log('‚ùå Error reading JSONBin, creating new structure:', error.message);\n  allSessions = {};\n}\n\n// Crear o actualizar sesi√≥n del usuario\nconst isNewUser = !allSessions[chatId]?.createdAt;\n\nif (allSessions[chatId]) {\n  allSessions[chatId] = {\n    chatId: chatId,\n    estado: newState,\n    datos: sessionData,\n    createdAt: isNewUser ? new Date().toISOString() : (allSessions[chatId]?.createdAt || new Date().toISOString()),\n    updatedAt: new Date().toISOString(),\n    lastActivity: new Date().toISOString()\n  };\n}\n\nconsole.log(isNewUser ? 'üÜï Created new user session' : 'üîÑ Updated existing user session');\nconsole.log('User state:', newState);\nconsole.log('Session data:', JSON.stringify(sessionData, null, 2));\n\n// Preparar estructura completa para JSONBin\nconst jsonbinData = {\n  sessions: allSessions\n};\n\nreturn {\n  json: {\n    chatId: chatId,\n    jsonbinData: jsonbinData,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        240
      ],
      "id": "183e4c03-c5a8-4350-bcdc-9a154c6ff07b",
      "name": "Prepare JSONBin Update"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.jsonbinData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        300,
        160
      ],
      "id": "779bc951-6695-4616-b667-ffbd4d5a272b",
      "name": "Update JSONBin"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for WhatsApp\nconst mergeData = $('Merge Responses').first().json;\n\nreturn {\n  json: {\n    chatId: mergeData.chatId,\n    message: mergeData.response.message\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        600
      ],
      "id": "0526c572-d7bb-493c-93dc-c5b444addc9f",
      "name": "Prepare WhatsApp Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://waapi.app/api/v1/instances/76556/client/action/send-message ",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer RnfskkYrbR0Sh2Acnr5B9GwPDl545m1jPPKDbccoa2ab2e89"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chatId\": {{ JSON.stringify($json.chatId) }},\n  \"message\": {{ JSON.stringify($json.message) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        440
      ],
      "id": "3187b0c9-6ed5-43ac-b360-103081b802f0",
      "name": "Send WhatsApp"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Start": {
      "main": [
        [
          {
            "node": "Parse Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Message": {
      "main": [
        [
          {
            "node": "Get Auth Token",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get User Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Auth Token": {
      "main": [
        [
          {
            "node": "Get Especialidades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Session": {
      "main": [
        [
          {
            "node": "Process State Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process State Logic": {
      "main": [
        [
          {
            "node": "Check Initial State",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check DNI Validation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Days Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Hours Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check API Submission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check DNI Validation": {
      "main": [
        [
          {
            "node": "Validate DNI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate DNI": {
      "main": [
        [
          {
            "node": "Process DNI Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process DNI Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Days Data": {
      "main": [
        [
          {
            "node": "Get Days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Days": {
      "main": [
        [
          {
            "node": "Process Days Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Days Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Hours Data": {
      "main": [
        [
          {
            "node": "Get Hours",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Hours": {
      "main": [
        [
          {
            "node": "Process Hours Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Hours Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Submission": {
      "main": [
        [
          {
            "node": "Submit Turno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Initial State": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Submit Turno": {
      "main": [
        [
          {
            "node": "Process API Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process API Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Responses": {
      "main": [
        [
          {
            "node": "Prepare JSONBin Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare JSONBin Update": {
      "main": [
        [
          {
            "node": "Update JSONBin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update JSONBin": {
      "main": [
        [
          {
            "node": "Prepare WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare WhatsApp Message": {
      "main": [
        [
          {
            "node": "Send WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e2ec1796-8890-40c1-8f44-36dd06e71ec0",
  "meta": {
    "instanceId": "556514cf317cac5c724bf084ccbb32127ff27cc56f225fb39f131295f3c7f3d0"
  },
  "id": "v8eKjjtCYC1WyQw8",
  "tags": []
}
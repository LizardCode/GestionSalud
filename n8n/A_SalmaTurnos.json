{
  "name": "A_SalmaTurnos",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ac247fd3-9ca7-42a3-8942-7ea8c321c46d",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1940,
        440
      ],
      "id": "06f4a861-6ace-4710-b240-7f14fc79b3d0",
      "name": "Webhook Start",
      "webhookId": "e3b2122c-9d00-4104-b64f-91553cc08f8c"
    },
    {
      "parameters": {
        "jsCode": "// Parse WhatsApp Message\nconst items = $input.all();\nconst message = items[0].json.body.data.message;\n\nif (!message || message.type !== 'chat') {\n  return [{ json: { error: \"Invalid message type\" } }];\n}\n\nconst chatId = message.from;\nconst messageText = message.body?.trim() || \"\";\nconst messageId = message.id;\n\nreturn [{\n  json: {\n    chatId: chatId,\n    messageText: messageText,\n    messageId: messageId,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        500
      ],
      "id": "da81bf1d-c7d5-461d-9ea9-5b8acff48a70",
      "name": "Parse Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/login",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"user\": \"admin\",\n  \"password\": \"1234\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1420,
        240
      ],
      "id": "8bcbe112-4e02-4433-8471-d5bef1409d32",
      "name": "Get Auth Token"
    },
    {
      "parameters": {
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1420,
        560
      ],
      "id": "f788d4b0-7e55-400d-9106-431d9c8db242",
      "name": "Get User Session"
    },
    {
      "parameters": {
        "url": "https://api.salmasalud.com.ar/especialidades",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Auth Token').first().json.token}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1160,
        200
      ],
      "id": "7b1790c2-5da0-43f5-95bc-b0417350810e",
      "name": "Get Especialidades"
    },
    {
      "parameters": {
        "jsCode": "// Process User State and Determine Next Step\nconst chatId = $('Parse Message').first().json.chatId;\nconst messageText = $('Parse Message').first().json.messageText.trim();\nconst token = $('Get Auth Token').first().json.token;\n// FIXED: Use .all() to get all items from the node, then extract the data\nconst especialidadesItems = $('Get Especialidades').all();\nconst especialidades = (especialidadesItems && especialidadesItems.length > 0) ? especialidadesItems.map(item => item.json) : [];\n\n// Get user session from JSONBin\nlet allSessions = {};\nlet userSession = null;\n\ntry {\n  const jsonbinResponse = $('Get User Session').first().json;\n  if (jsonbinResponse && jsonbinResponse.record && jsonbinResponse.record.sessions) {\n    allSessions = jsonbinResponse.record.sessions;\n    console.log('‚úÖ JSONBin data loaded, total users:', Object.keys(allSessions).length);\n  } else {\n    console.log('‚ö†Ô∏è No existing JSONBin data, creating new structure');\n    allSessions = {};\n  }\n  userSession = allSessions[chatId];\n} catch (error) {\n  console.log('‚ùå Error reading JSONBin, creating new structure:', error.message);\n  allSessions = {};\n}\n\n// Initialize new user session if doesn't exist\nif (!allSessions[chatId]) {\n  allSessions[chatId] = {\n    chatId: chatId,\n    estado: \"INICIO\",\n    datos: {},\n    createdAt: new Date().toISOString(),\n    lastActivity: new Date().toISOString()\n  };\n  console.log('üÜï Initialized new user session for:', chatId);\n}\n\n// Get current user session\nuserSession = allSessions[chatId];\nconst isNewUser = !userSession.datos || Object.keys(userSession.datos).length === 0;\n\n// Update last activity\nuserSession.lastActivity = new Date().toISOString();\nconsole.log(isNewUser ? 'üÜï New user detected' : 'üîÑ Existing user session loaded');\n\n// Process based on current state\nlet response = {};\nlet newState = userSession.estado;\nlet updateData = { ...userSession.datos };\nlet isValid = true;\nlet errorMessage = \"\";\nlet needsDniValidation = false;\nlet needsDaysData = false;\nlet needsHoursData = false;\nlet needsApiSubmission = false;\nlet needsConfirmationDisplay = false;\n\n// CRITICAL FIX: Detect if we're transitioning from INICIO/COMPLETADO states\nconst currentState = userSession.estado || \"INICIO\";\nlet skipDniProcessing = (currentState === \"INICIO\" || currentState === \"COMPLETADO\");\n\n// CRITICAL: If skipDniProcessing is true, we MUST prevent ALL processing nodes from executing\nif (skipDniProcessing) {\n  console.log('üõë SKIP MODE ACTIVE: Preventing all processing operations for state transition from ' + currentState);\n  // Force all processing flags to false to prevent parallel execution of validation nodes\n  needsDniValidation = false;\n  needsDaysData = false;\n  needsHoursData = false;\n  needsApiSubmission = false;\n  needsConfirmationDisplay = false;\n}\n\nswitch (userSession.estado) {\n  case \"INICIO\":\n  case \"COMPLETADO\":\n    // Start or restart flow - ONLY show welcome message\n    if (userSession.estado === \"COMPLETADO\") {\n      updateData = {}; // Clear previous data\n    }\n    response = {\n      message: \"üè• Bienvenido al Sistema de Turnos\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\"\n    };\n    newState = \"ESPERANDO_DNI\";\n    console.log('üîÑ State transition: ' + currentState + ' -> ESPERANDO_DNI (skipDniProcessing: true)');\n    break;\n\n  case \"ESPERANDO_DNI\":\n    // CRITICAL: Skip DNI processing if we just transitioned from INICIO/COMPLETADO\n    if (skipDniProcessing) {\n      console.log('‚è≠Ô∏è Skipping DNI processing - just transitioned from ' + currentState + ' state');\n      // The user will need to send another message for actual DNI validation\n      // Keep current response (welcome message) and don't process current message as DNI\n      // DO NOT break here - we want to keep the welcome message from the previous case\n      console.log('üìù Keeping welcome message, user needs to send DNI in next message');\n      break;\n    }\n    \n    // Process actual DNI input from user's next message\n    console.log('üîç Processing DNI input: \"' + messageText + '\"');\n    \n    // Clean and validate DNI\n    const cleanDNI = messageText.replace(/[^\\d]/g, '');\n    \n    if (!cleanDNI || cleanDNI.length < 7 || cleanDNI.length > 8) {\n      isValid = false;\n      errorMessage = `‚ùå DNI inv√°lido\\n\\nPor favor ingrese solo n√∫meros, entre 7 y 8 d√≠gitos.\\n\\nFormatos aceptados:\\n‚Ä¢ 25430441\\n‚Ä¢ 25.430.441\\n‚Ä¢ 25 430 441\\n\\nSu entrada: \"${messageText}\"\\nProcesado como: \"${cleanDNI}\"`;\n      console.log('‚ùå Validation failed for state:', userSession.estado);\n      console.log('‚ùå Error message:', errorMessage);\n      console.log('‚ùå isValid flag:', isValid);\n    } else {\n      updateData.dni = cleanDNI;\n      needsDniValidation = true;\n      newState = \"VALIDANDO_DNI\";\n      response = {\n        message: \"‚è≥ Validando DNI...\"\n      };\n    }\n    break;\n\n  case \"ESPERANDO_ESPECIALIDAD\":\n    const especialidadId = parseInt(messageText);\n    \n    // Ensure especialidades is an array\n    let especialidadesArray = [];\n    if (Array.isArray(especialidades)) {\n      especialidadesArray = especialidades;\n    } else if (especialidades && Array.isArray(especialidades)) {\n      especialidadesArray = especialidades;\n    }\n    \n    const especialidad = especialidadesArray.find(e => e.idEspecialidad === especialidadId);\n    \n    if (!especialidad) {\n      isValid = false;\n      let opciones = especialidadesArray.map(e => `${e.idEspecialidad}. ${e.descripcion}`).join('\\n');\n      errorMessage = `‚ùå No se reconoce el valor ingresado\\n\\nOpciones v√°lidas:\\n${opciones}`;\n      console.log('‚ùå Validation failed for state:', userSession.estado);\n      console.log('‚ùå Error message:', errorMessage);\n      console.log('‚ùå isValid flag:', isValid);\n    } else {\n      updateData.especialidad = especialidad;\n      needsDaysData = true;\n      newState = \"CARGANDO_DIAS\";\n      response = {\n        message: `‚è≥ Obteniendo d√≠as disponibles para ${especialidad.descripcion}...`\n      };\n    }\n    break;\n\n  case \"ESPERANDO_DIA\":\n    const diaId = parseInt(messageText);\n    if (!updateData.diasDisponibles || !updateData.diasDisponibles[diaId]) {\n      isValid = false;\n      if (updateData.diasDisponibles) {\n        let opciones = Object.keys(updateData.diasDisponibles).map(key => `${key}. ${updateData.diasDisponibles[key]}`).join('\\n');\n        errorMessage = `‚ùå No se reconoce el valor ingresado\\n\\nOpciones v√°lidas:\\n${opciones}`;\n      console.log('‚ùå Validation failed for state:', userSession.estado);\n      console.log('‚ùå Error message:', errorMessage);\n      console.log('‚ùå isValid flag:', isValid);\n      } else {\n        errorMessage = \"‚ùå Error: D√≠as no cargados. Por favor inicie nuevamente el proceso.\";\n      console.log('‚ùå Validation failed for state:', userSession.estado);\n      console.log('‚ùå Error message:', errorMessage);\n      console.log('‚ùå isValid flag:', isValid);\n      }\n    } else {\n      updateData.diaSeleccionado = {\n        id: diaId,\n        descripcion: updateData.diasDisponibles[diaId]\n      };\n      needsHoursData = true;\n      newState = \"CARGANDO_HORARIOS\";\n      response = {\n        message: `‚è≥ Obteniendo horarios disponibles para ${updateData.diaSeleccionado.descripcion}...`\n      };\n    }\n    break;\n\n  case \"ESPERANDO_HORARIO\":\n    const horarioId = parseInt(messageText);\n    if (!updateData.horariosDisponibles || !updateData.horariosDisponibles[horarioId]) {\n      isValid = false;\n      if (updateData.horariosDisponibles) {\n        let opciones = Object.keys(updateData.horariosDisponibles).map(key => `${key}. ${updateData.horariosDisponibles[key]}`).join('\\n');\n        errorMessage = `‚ùå No se reconoce el valor ingresado\\n\\nOpciones v√°lidas:\\n${opciones}`;\n      console.log('‚ùå Validation failed for state:', userSession.estado);\n      console.log('‚ùå Error message:', errorMessage);\n      console.log('‚ùå isValid flag:', isValid);\n      } else {\n        errorMessage = \"‚ùå Error: Horarios no cargados. Por favor inicie nuevamente el proceso.\";\n      console.log('‚ùå Validation failed for state:', userSession.estado);\n      console.log('‚ùå Error message:', errorMessage);\n      console.log('‚ùå isValid flag:', isValid);\n      }\n    } else {\n      updateData.horarioSeleccionado = {\n        id: horarioId,\n        descripcion: updateData.horariosDisponibles[horarioId]\n      };\n      \n      // Show confirmation\n      const resumen = `üìã Resumen de su turno:\\n\\n` +\n                     `üë§ Paciente: ${updateData.paciente?.nombre || updateData.paciente?.name || updateData.paciente?.nombreCompleto || \"Paciente\"}\\n` +\n                     `üè• Especialidad: ${updateData.especialidad.descripcion}\\n` +\n                     `üìÖ D√≠a: ${updateData.diaSeleccionado.descripcion}\\n` +\n                     `üïê Horario: ${updateData.horarioSeleccionado.descripcion}\\n\\n` +\n                     `¬øConfirma la reserva del turno?\\n\\n` +\n                     `‚úÖ Escriba \"SI\" para confirmar\\n` +\n                     `‚ùå Escriba \"NO\" para cancelar`;\n      \n      response = {\n        message: resumen\n      };\n      newState = \"ESPERANDO_CONFIRMACION\";\n      needsConfirmationDisplay = true;\n    }\n    break;\n\n  case \"ESPERANDO_CONFIRMACION\":\n    const confirmacionText = messageText.toUpperCase().trim();\n    \n    if (confirmacionText === \"SI\") {\n      needsApiSubmission = true;\n      newState = \"PROCESANDO_API\";\n      response = {\n        message: \"‚úÖ Turno confirmado\\n\\nProcesando su solicitud...\"\n      };\n    } else if (confirmacionText === \"NO\") {\n      updateData = {};\n      newState = \"INICIO\";\n      response = {\n        message: \"‚ùå Turno cancelado\\n\\n¬øDesea agendar un nuevo turno?\\n\\nEnv√≠e cualquier mensaje para comenzar.\"\n      };\n    } else {\n      isValid = false;\n      errorMessage = \"‚ùå No se reconoce el valor ingresado\\\\n\\\\nOpciones v√°lidas:\\\\n‚úÖ Escriba \\\"SI\\\" para confirmar\\\\n‚ùå Escriba \\\"NO\\\" para cancelar\";\n      console.log('‚ùå Validation failed for state:', userSession.estado);\n      console.log('‚ùå Error message:', errorMessage);\n      console.log('‚ùå isValid flag:', isValid);\n    }\n    break;\n\n  default:\n    // Unknown state, restart\n    response = {\n      message: \"üè• Bienvenido al Sistema de Turnos\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\"\n    };\n    newState = \"ESPERANDO_DNI\";\n    updateData = {};\n}\n\n// Update session data\nallSessions[chatId] = {\n  chatId: chatId,\n  estado: isValid ? newState : userSession.estado,\n  datos: isValid ? updateData : userSession.datos,\n  createdAt: userSession.createdAt,\n  lastActivity: new Date().toISOString()\n};\n\n// Clean message for WhatsApp\nlet finalMessage = isValid ? response.message : errorMessage;\nlet cleanedMessage = finalMessage\n\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    isValid: isValid,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    token: token,\n    needsDniValidation: needsDniValidation,\n    needsDaysData: needsDaysData,\n    needsHoursData: needsHoursData,\n    needsApiSubmission: needsApiSubmission,\n    needsConfirmationDisplay: needsConfirmationDisplay,\n    currentState: isValid ? newState : userSession.estado,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1160,
        540
      ],
      "id": "54a428c3-a939-4c14-9499-ffd2d2fb9bec",
      "name": "Process State Logic"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "dni-validation",
              "leftValue": "={{ $json.needsDniValidation }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        240
      ],
      "id": "d19067ca-39dd-49f0-8a43-fd59447a1e17",
      "name": "Check DNI Validation"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/paciente-by-documento/{{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.dni }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        160
      ],
      "id": "5a70ab52-359c-43ea-ae7c-3584e4592172",
      "name": "Validate DNI",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Process DNI Validation Result - WITH EXTENSIVE DEBUGGING\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\nconsole.log('üîç DEBUG: Starting Process DNI Result with chatId:', chatId);\nconsole.log('üîç DEBUG: State data:', JSON.stringify(stateData, null, 2));\n\n// Get especialidades with validation\nlet especialidades = [];\ntry {\n  // FIXED: Use .all() instead of .first().json to get all items from the node\n  const especialidadesItems = $('Get Especialidades').all();\n  \n  console.log('üìä Get Especialidades items count:', especialidadesItems.length);\n  console.log('üìä Get Especialidades items structure:', JSON.stringify(especialidadesItems, null, 2));\n  \n  let especialidadesResponse = null;\n  if (especialidadesItems && especialidadesItems.length > 0) {\n    // Extract the actual data from the first item's json property\n    especialidadesResponse = especialidadesItems.map(item => item.json);\n    console.log('üîç DEBUG: Raw especialidades data type:', typeof especialidadesResponse);\n    console.log('üîç DEBUG: Is especialidades an array?', Array.isArray(especialidadesResponse));\n    console.log('üîç DEBUG: Especialidades length:', especialidadesResponse?.length);\n    console.log('üîç DEBUG: First specialty item:', especialidadesResponse?.[0]);\n    console.log('üîç DEBUG: All specialties:', JSON.stringify(especialidadesResponse, null, 2));\n  } else {\n    console.log('‚ö†Ô∏è No items returned from Get Especialidades node');\n    especialidadesResponse = null;\n  }\n  \n  console.log('üìä Raw especialidades response:', JSON.stringify(especialidadesResponse, null, 2));\n  \n  // Only process if we have valid response data\n  if (!especialidadesResponse) {\n    console.log('‚ö†Ô∏è No especialidades data available');\n    especialidades = [];\n  } else if (Array.isArray(especialidadesResponse)) {\n    especialidades = especialidadesResponse;\n  } else if (especialidadesResponse && typeof especialidadesResponse === 'object') {\n    // If it's wrapped in an object, try to extract the array\n    if (especialidadesResponse.data && Array.isArray(especialidadesResponse.data)) {\n      especialidades = especialidadesResponse.data;\n    } else if (especialidadesResponse.especialidades && Array.isArray(especialidadesResponse.especialidades)) {\n      especialidades = especialidadesResponse.especialidades;\n    } else if (especialidadesResponse.idEspecialidad) {\n      // Single specialty object\n      especialidades = [especialidadesResponse];\n    }\n  }\n  \n  console.log('‚úÖ Especialidades processed:', especialidades.length + ' items');\n  console.log('üìã Especialidades array:', JSON.stringify(especialidades, null, 2));\n} catch (error) {\n  console.log('‚ùå Error processing especialidades:', error.message);\n  console.log('‚ùå Error stack:', error.stack);\n  especialidades = [];\n}\n\n// Check if DNI validation was successful\nlet dniValid = false;\nlet errorMessage = \"\";\n\ntry {\n  const dniResponse = $('Validate DNI').first().json;\n  console.log('üîç DEBUG: DNI Response:', JSON.stringify(dniResponse, null, 2));\n  if (dniResponse && (dniResponse.idPaciente || dniResponse.id)) {\n    dniValid = true;\n    // Store patient data\n    allSessions[chatId].datos.paciente = dniResponse;\n    console.log('‚úÖ DEBUG: DNI Valid, patient data stored');\n  } else {\n    errorMessage = \"‚ùå DNI no encontrado en el sistema\\n\\nPor favor verifique el n√∫mero ingresado o comun√≠quese con la cl√≠nica para registrarse.\";\n    console.log('‚ùå DEBUG: DNI Invalid, no patient found');\n  }\n} catch (error) {\n  console.log('DNI Validation Error:', error.message);\n  console.log('‚ùå Error stack:', error.stack);\n  errorMessage = \"‚ùå Error validando DNI\\n\\nPor favor intente nuevamente o verifique el n√∫mero ingresado.\";\n}\n\nlet responseMessage = \"\";\n\nif (dniValid) {\n  // Show specialties\n  allSessions[chatId].estado = \"ESPERANDO_ESPECIALIDAD\";\n  \n  // Extract patient name from API response\n  const pacienteData = allSessions[chatId].datos.paciente;\n  let patientName = \"\";\n  \n  // Try different possible name fields from the API response\n  if (pacienteData) {\n    patientName = pacienteData.nombre || \n                 pacienteData.name || \n                 pacienteData.nombreCompleto || \n                 pacienteData.fullName || \n                 pacienteData.nombrePaciente || \n                 pacienteData.nombreApellido || \n                 pacienteData.apellidoNombre || \n                 \"\";\n  }\n  \n  console.log('üë§ DEBUG: Patient name extracted:', patientName);\n  \n  // Build the welcome message with or without name\n  let especialidadesText = \"\";\n  if (patientName && patientName.trim() !== \"\") {\n    especialidadesText = `üëã ¬°Hola ${patientName.trim()}!\\n\\nüë®‚Äç‚öïÔ∏è Seleccione una especialidad:\\n\\n`;\n  } else {\n    especialidadesText = \"üë®‚Äç‚öïÔ∏è Seleccione una especialidad:\\n\\n\";\n  }\n  \n  console.log('üîÑ DEBUG: Starting forEach with', especialidades.length, 'items');\n  console.log('üîÑ DEBUG: Initial especialidadesText:', especialidadesText);\n  \n  // Validate especialidades is an array before forEach\n  if (Array.isArray(especialidades) && especialidades.length > 0) {\n    console.log('üîÑ Building especialidades list with', especialidades.length, 'items');\n    \n    // CRITICAL FIX: Build the list directly without intermediate variable\n    // Process each specialty and append immediately\n    especialidades.forEach((esp, index) => {\n      console.log(`üîÑ DEBUG: Processing specialty ${index + 1}:`, esp);\n      console.log(`üîÑ DEBUG: Before adding item ${index + 1}, text length:`, especialidadesText.length);\n      \n      if (esp && esp.idEspecialidad && esp.descripcion) {\n        const listItem = `${esp.idEspecialidad}. ${esp.descripcion}\\n`;\n        console.log(`üîÑ DEBUG: Adding item: \"${listItem}\"`);\n        \n        // Append directly to especialidadesText to avoid string concatenation issues\n        especialidadesText += listItem;\n        \n        console.log(`üîÑ DEBUG: After adding item ${index + 1}, text length:`, especialidadesText.length);\n        console.log(`üîÑ DEBUG: Current text:`, especialidadesText);\n        console.log(`‚úÖ Added specialty: ${esp.idEspecialidad}. ${esp.descripcion}`);\n      } else {\n        console.log('‚ö†Ô∏è Invalid specialty object at index', index, ':', esp);\n      }\n    });\n    \n    console.log('‚úÖ DEBUG: Final especialidadesText length:', especialidadesText.length);\n    console.log('‚úÖ DEBUG: Final especialidadesText content:', especialidadesText);\n    console.log(`üìä Final especialidades text (${especialidadesText.length} chars):`);\n    console.log('üìù Final text content:', especialidadesText);\n  } else {\n    console.log('‚ö†Ô∏è No especialidades available or invalid format. Data:', especialidades);\n    especialidadesText += \"‚ùå No hay especialidades disponibles en este momento.\\n\\nPor favor intente m√°s tarde.\";\n    // Keep in DNI validation state to allow retry\n    allSessions[chatId].estado = \"ESPERANDO_DNI\";\n  }\n  \n  responseMessage = especialidadesText;\n  console.log('üßπ DEBUG: Before cleaning, responseMessage:', responseMessage);\n} else {\n  // Keep in DNI state with error\n  allSessions[chatId].estado = \"ESPERANDO_DNI\";\n  responseMessage = errorMessage;\n  console.log('üßπ DEBUG: Before cleaning, error responseMessage:', responseMessage);\n}\n\n// CRITICAL FIX: Simplified message cleaning - avoid aggressive regex that might truncate content\nlet cleanedMessage = responseMessage\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")  // Remove markdown bold\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");       // Clean list items\n\nconsole.log('üßπ DEBUG: After cleaning, cleanedMessage:', cleanedMessage);\nconsole.log('üìä DEBUG: Final cleaned message length:', cleanedMessage.length);\n\nconst result = [{\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    dniValid: dniValid,\n    timestamp: new Date().toISOString()\n  }\n}];\n\nconsole.log('üì§ DEBUG: Final return result:', JSON.stringify(result, null, 2));\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        180
      ],
      "id": "19b8b36b-e825-4667-9e76-14b5a1cd9d5b",
      "name": "Process DNI Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "days-data",
              "leftValue": "={{ $('Process State Logic').first().json.needsDaysData }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        440
      ],
      "id": "0e1462c1-01d1-4e6e-9a41-c3204399317d",
      "name": "Check Days Data"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/dias?idEspecialidad={{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        440
      ],
      "id": "8e5142ac-8d6e-4002-a762-1c7c2d1c0692",
      "name": "Get Days"
    },
    {
      "parameters": {
        "jsCode": "// Process Days Data - WITH EXTENSIVE DEBUGGING\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\nconsole.log('üîç DEBUG: Starting Process Days Result with chatId:', chatId);\nconsole.log('üîç DEBUG: State data:', JSON.stringify(stateData, null, 2));\n\n// Get days from API response\n// FIXED: Get days from API response - use .all() to get all items from the node\nconst diasItems = $('Get Days').all();\nlet diasResponse = null;\n\nconsole.log('üìä Get Days items count:', diasItems.length);\nconsole.log('üìä Get Days items structure:', JSON.stringify(diasItems, null, 2));\n\nif (diasItems && diasItems.length > 0) {\n  // FIXED: Extract the actual data from all items and map to get the json data\n  diasResponse = diasItems.map(item => item.json);\n  console.log('üîç DEBUG: Raw days data type:', typeof diasResponse);\n  console.log('üîç DEBUG: Is days an array?', Array.isArray(diasResponse));\n  console.log('üîç DEBUG: Days length:', diasResponse?.length);\n  console.log('üîç DEBUG: All days:', JSON.stringify(diasResponse, null, 2));\n} else {\n  console.log('‚ö†Ô∏è No items returned from Get Days node');\n  diasResponse = null;\n}\n\nlet diasObj = {};\n\nconsole.log('üîç DEBUG: Days API Response:', JSON.stringify(diasResponse, null, 2));\n\n// Process days - handle both array and single object cases\nif (Array.isArray(diasResponse)) {\n  console.log('‚úÖ Processing days array with', diasResponse.length, 'items');\n  diasResponse.forEach((dia, index) => {\n    console.log(`üîÑ Processing day ${index + 1}:`, dia);\n    if (dia.idTipoDia && dia.descripcion) {\n      diasObj[dia.idTipoDia] = dia.descripcion;\n      console.log(`‚úÖ Added day: ${dia.idTipoDia}. ${dia.descripcion}`);\n    } else {\n      console.log('‚ö†Ô∏è Invalid day object at index', index, ':', dia);\n    }\n  });\n} else if (diasResponse && typeof diasResponse === 'object' && diasResponse.idTipoDia && diasResponse.descripcion) {\n  // FIXED: Handle single day object case properly\n  console.log('‚úÖ Processing single day object');\n  diasObj[diasResponse.idTipoDia] = diasResponse.descripcion;\n  console.log(`‚úÖ Added single day: ${diasResponse.idTipoDia}. ${diasResponse.descripcion}`);\n} else if (diasResponse && typeof diasResponse === 'object') {\n  // Handle other object formats (wrapped data, etc.)\n  console.log('‚ö†Ô∏è Unexpected object format for days response, checking for wrapped data');\n  if (diasResponse.data && Array.isArray(diasResponse.data)) {\n    diasResponse.data.forEach((dia, index) => {\n      if (dia.idTipoDia && dia.descripcion) {\n        diasObj[dia.idTipoDia] = dia.descripcion;\n        console.log(`‚úÖ Added wrapped day: ${dia.idTipoDia}. ${dia.descripcion}`);\n      }\n    });\n  } else {\n    console.log('‚ö†Ô∏è Could not process object format:', diasResponse);\n  }\n}\n\nconsole.log('üìä Final days object:', JSON.stringify(diasObj, null, 2));\n\n// Store days data in session\nallSessions[chatId].datos.diasDisponibles = diasObj;\nallSessions[chatId].estado = \"ESPERANDO_DIA\";\n\n// Format days for display\nlet diasText = \"üìÖ Seleccione un d√≠a:\\n\\n\";\n\nconsole.log('üîÑ DEBUG: Starting days forEach with', Object.keys(diasObj).length, 'items');\nconsole.log('üîÑ DEBUG: Initial diasText:', diasText);\n\n// Check if we have any days to display\nif (Object.keys(diasObj).length === 0) {\n  console.log('‚ö†Ô∏è No days available for display');\n  diasText += \"‚ùå No hay d√≠as disponibles en este momento.\\n\\nPor favor intente m√°s tarde.\";\n  // Keep in previous state to allow retry\n  allSessions[chatId].estado = \"ESPERANDO_ESPECIALIDAD\";\n} else {\n  console.log('üîÑ Building days list with', Object.keys(diasObj).length, 'items');\n  \n  Object.keys(diasObj).forEach((key, index) => {\n    console.log(`üîÑ DEBUG: Processing day ${index + 1}:`, { key: key, value: diasObj[key] });\n    console.log(`üîÑ DEBUG: Before adding day ${index + 1}, text length:`, diasText.length);\n    \n    const listItem = `${key}. ${diasObj[key]}\\n`;\n    console.log(`üîÑ DEBUG: Adding item: \"${listItem}\"`);\n    \n    // Append directly to diasText to avoid string concatenation issues\n    diasText += listItem;\n    \n    console.log(`üîÑ DEBUG: After adding day ${index + 1}, text length:`, diasText.length);\n    console.log(`üîÑ DEBUG: Current diasText:`, diasText);\n    console.log(`‚úÖ Added day: ${key}. ${diasObj[key]}`);\n  });\n  \n  // Add multi-selection hint after all days are listed\n  diasText += \"\\nüí° Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas\\nEjemplo: 1,3,5\";\n}\n\nconsole.log('‚úÖ DEBUG: Final diasText length:', diasText.length);\nconsole.log('‚úÖ DEBUG: Final diasText content:', diasText);\n\n// Clean message for WhatsApp\nconsole.log('üßπ DEBUG: Before cleaning, responseMessage:', diasText);\n\nlet cleanedMessage = diasText\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\nconsole.log('üßπ DEBUG: After cleaning, cleanedMessage:', cleanedMessage);\nconsole.log('üìä DEBUG: Final cleaned message length:', cleanedMessage.length);\n\nconst result = {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('üì§ DEBUG: Final return result:', JSON.stringify(result, null, 2));\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        440
      ],
      "id": "4b60e6cd-9761-44c5-b2da-39b78e4e6e3d",
      "name": "Process Days Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "hours-data",
              "leftValue": "={{ $('Process State Logic').first().json.needsHoursData }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        660
      ],
      "id": "f7c45435-e9b2-43ba-b7d9-08ed56444f6b",
      "name": "Check Hours Data"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/rangos-horarios?idEspecialidad={{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        660
      ],
      "id": "f52ec25a-2674-457f-bc6c-09fec96a0755",
      "name": "Get Hours"
    },
    {
      "parameters": {
        "jsCode": "// Process Hours Data - WITH EXTENSIVE DEBUGGING\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\nconsole.log('üîç DEBUG: Starting Process Hours Result with chatId:', chatId);\nconsole.log('üîç DEBUG: State data:', JSON.stringify(stateData, null, 2));\n\n// Get hours from API response\n// FIXED: Use .all() instead of .first().json to get all items from the node\nconst horariosItems = $('Get Hours').all();\nlet horariosResponse = null;\n\nconsole.log('üìä Get Hours items count:', horariosItems.length);\nconsole.log('üìä Get Hours items structure:', JSON.stringify(horariosItems, null, 2));\n\nif (horariosItems && horariosItems.length > 0) {\n  // FIXED: Extract the actual data from all items and map to get the json data\n  horariosResponse = horariosItems.map(item => item.json);\n  console.log('üîç DEBUG: Raw hours data type:', typeof horariosResponse);\n  console.log('üîç DEBUG: Is hours an array?', Array.isArray(horariosResponse));\n  console.log('üîç DEBUG: Hours length:', horariosResponse?.length);\n  console.log('üîç DEBUG: All hours:', JSON.stringify(horariosResponse, null, 2));\n} else {\n  console.log('‚ö†Ô∏è No items returned from Get Hours node');\n  horariosResponse = null;\n}\n\nlet horariosObj = {};\n\nconsole.log('üîç DEBUG: Hours API Response:', JSON.stringify(horariosResponse, null, 2));\n\n// Process hours - handle both array and single object cases\nif (Array.isArray(horariosResponse)) {\n  console.log('‚úÖ Processing hours array with', horariosResponse.length, 'items');\n  horariosResponse.forEach((horario, index) => {\n    console.log(`üîÑ Processing hour ${index + 1}:`, horario);\n    if (horario.idRangoHorario && horario.descripcion) {\n      horariosObj[horario.idRangoHorario] = horario.descripcion;\n      console.log(`‚úÖ Added hour: ${horario.idRangoHorario}. ${horario.descripcion}`);\n    } else {\n      console.log('‚ö†Ô∏è Invalid hour object at index', index, ':', horario);\n    }\n  });\n} else if (horariosResponse && typeof horariosResponse === 'object' && horariosResponse.idRangoHorario && horariosResponse.descripcion) {\n  // FIXED: Handle single hour object case properly\n  console.log('‚úÖ Processing single hour object');\n  horariosObj[horariosResponse.idRangoHorario] = horariosResponse.descripcion;\n  console.log(`‚úÖ Added single hour: ${horariosResponse.idRangoHorario}. ${horariosResponse.descripcion}`);\n} else if (horariosResponse && typeof horariosResponse === 'object') {\n  // Handle other object formats (wrapped data, etc.)\n  console.log('‚ö†Ô∏è Unexpected object format for hours response, checking for wrapped data');\n  if (horariosResponse.data && Array.isArray(horariosResponse.data)) {\n    horariosResponse.data.forEach((horario, index) => {\n      if (horario.idRangoHorario && horario.descripcion) {\n        horariosObj[horario.idRangoHorario] = horario.descripcion;\n        console.log(`‚úÖ Added wrapped hour: ${horario.idRangoHorario}. ${horario.descripcion}`);\n      }\n    });\n  } else {\n    console.log('‚ö†Ô∏è Could not process object format:', horariosResponse);\n  }\n}\n\nconsole.log('üìä Final hours object:', JSON.stringify(horariosObj, null, 2));\n\n// Store hours data in session\nallSessions[chatId].datos.horariosDisponibles = horariosObj;\nallSessions[chatId].estado = \"ESPERANDO_HORARIO\";\n\n// Format hours for display\nlet horariosText = \"üïê Seleccione un horario:\\n\\n\";\n\nconsole.log('üîÑ DEBUG: Starting hours forEach with', Object.keys(horariosObj).length, 'items');\nconsole.log('üîÑ DEBUG: Initial horariosText:', horariosText);\n\n// Check if we have any hours to display\nif (Object.keys(horariosObj).length === 0) {\n  console.log('‚ö†Ô∏è No hours available for display');\n  horariosText += \"‚ùå No hay horarios disponibles en este momento.\\n\\nPor favor intente m√°s tarde.\";\n  // Keep in previous state to allow retry\n  allSessions[chatId].estado = \"ESPERANDO_DIA\";\n} else {\n  console.log('üîÑ Building hours list with', Object.keys(horariosObj).length, 'items');\n  \n  Object.keys(horariosObj).forEach((key, index) => {\n    console.log(`üîÑ DEBUG: Processing hour ${index + 1}:`, { key: key, value: horariosObj[key] });\n    console.log(`üîÑ DEBUG: Before adding hour ${index + 1}, text length:`, horariosText.length);\n    \n    const listItem = `${key}. ${horariosObj[key]}\\n`;\n    console.log(`üîÑ DEBUG: Adding item: \"${listItem}\"`);\n    \n    // Append directly to horariosText to avoid string concatenation issues\n    horariosText += listItem;\n    \n    console.log(`üîÑ DEBUG: After adding hour ${index + 1}, text length:`, horariosText.length);\n    console.log(`üîÑ DEBUG: Current horariosText:`, horariosText);\n    console.log(`‚úÖ Added hour: ${key}. ${horariosObj[key]}`);\n  });\n  \n  // Add multi-selection hint after all hours are listed\n  horariosText += \"\\nüí° Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas\\nEjemplo: 1,3,5\";\n}\n\nconsole.log('‚úÖ DEBUG: Final horariosText length:', horariosText.length);\nconsole.log('‚úÖ DEBUG: Final horariosText content:', horariosText);\n\n// Clean message for WhatsApp\nconsole.log('üßπ DEBUG: Before cleaning, responseMessage:', horariosText);\n\nlet cleanedMessage = horariosText\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\nconsole.log('üßπ DEBUG: After cleaning, cleanedMessage:', cleanedMessage);\nconsole.log('üìä DEBUG: Final cleaned message length:', cleanedMessage.length);\n\nconst result = {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('üì§ DEBUG: Final return result:', JSON.stringify(result, null, 2));\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        660
      ],
      "id": "5326c53e-6f30-4d86-b0cf-45ee22b303e7",
      "name": "Process Hours Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "api-submission",
              "leftValue": "={{ $('Process State Logic').first().json.needsApiSubmission }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        860
      ],
      "id": "73b87f81-c6bf-462a-b3d0-030581397b00",
      "name": "Check API Submission"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "initial-state",
              "leftValue": "={{ $('Process State Logic').first().json.currentState }}",
              "rightValue": "ESPERANDO_DNI",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -860,
        60
      ],
      "id": "a7f055da-e03d-4e34-96f2-7e9ef0391570",
      "name": "Check Initial State"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/solicitar",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"documento\": {{ JSON.stringify($('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.dni) }},\n  \"telefono\": {{ JSON.stringify($('Process State Logic').first().json.chatId.replace('@c.us', '')) }},\n  \"idEspecialidad\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }},\n  \"dias\": [{{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.diaSeleccionado.id }}],\n  \"rangosHorarios\": [{{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.horarioSeleccionado.id }}]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        860
      ],
      "id": "af5756ac-64fe-41e1-b412-1ba087a3ebaa",
      "name": "Submit Turno"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "confirmation-display",
              "leftValue": "={{ $('Process State Logic').first().json.needsConfirmationDisplay }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        1060
      ],
      "id": "c5d8e9f1-4b2a-3c4d-5e6f-7890abcdef12",
      "name": "Check Confirmation Display"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "error-routing",
              "leftValue": "={{ $('Process State Logic').first().json.isValid }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -900,
        1260
      ],
      "id": "e7f8g9h0-1234-5678-9abc-def123456789",
      "name": "Check Error Routing"
    },
    {
      "parameters": {
        "jsCode": "// Process API Submission Result - WITH EXTENSIVE DEBUGGING\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\n// Check API response\nlet success = false;\nlet responseMessage = \"\";\nlet appointmentId = null;\n\ntry {\n  const apiResponse = $('Submit Turno').first().json;\n  \n  console.log('üîç DEBUG: Raw API Response:', JSON.stringify(apiResponse, null, 2));\n  console.log('üîç DEBUG: API Response type:', typeof apiResponse);\n  console.log('üîç DEBUG: Is API Response an array?', Array.isArray(apiResponse));\n  \n  // FIXED: Enhanced success detection logic to handle array responses like [57]\n  let isSuccessful = false;\n  \n  if (apiResponse) {\n    // Case 1: Traditional success indicators\n    if (apiResponse.success || apiResponse.id || apiResponse.idSolicitud) {\n      isSuccessful = true;\n      appointmentId = apiResponse.id || apiResponse.idSolicitud;\n      console.log('‚úÖ SUCCESS: Traditional success response detected');\n    }\n    // Case 2: Array response like [57] - this is the main fix\n    else if (Array.isArray(apiResponse) && apiResponse.length > 0) {\n      // Check if array contains valid appointment IDs (numbers > 0)\n      const validIds = apiResponse.filter(id => typeof id === 'number' && id > 0);\n      if (validIds.length > 0) {\n        isSuccessful = true;\n        appointmentId = validIds[0]; // Use first valid ID\n        console.log('‚úÖ SUCCESS: Array response with appointment ID:', appointmentId);\n      } else {\n        console.log('‚ö†Ô∏è Array response contains invalid IDs:', apiResponse);\n      }\n    }\n    // Case 3: Direct number response\n    else if (typeof apiResponse === 'number' && apiResponse > 0) {\n      isSuccessful = true;\n      appointmentId = apiResponse;\n      console.log('‚úÖ SUCCESS: Direct number response:', appointmentId);\n    }\n    // Case 4: Check for nested data\n    else if (apiResponse.data) {\n      if (Array.isArray(apiResponse.data) && apiResponse.data.length > 0) {\n        const validIds = apiResponse.data.filter(id => typeof id === 'number' && id > 0);\n        if (validIds.length > 0) {\n          isSuccessful = true;\n          appointmentId = validIds[0];\n          console.log('‚úÖ SUCCESS: Nested array data with appointment ID:', appointmentId);\n        }\n      } else if (typeof apiResponse.data === 'number' && apiResponse.data > 0) {\n        isSuccessful = true;\n        appointmentId = apiResponse.data;\n        console.log('‚úÖ SUCCESS: Nested number data:', appointmentId);\n      }\n    }\n    \n    console.log('üéØ Final success status:', isSuccessful);\n    console.log('üéØ Final appointment ID:', appointmentId);\n  } else {\n    console.log('‚ùå No API response received');\n  }\n  \n  if (isSuccessful) {\n    success = true;\n    allSessions[chatId].estado = \"COMPLETADO\";\n    \n    const userData = allSessions[chatId].datos;\n    const patientName = userData.paciente?.nombre || userData.paciente?.name || userData.paciente?.nombreCompleto || \"\";\n    \n    responseMessage = `‚úÖ ¬°Turno confirmado exitosamente!\\n\\n` +\n                     `Su turno ha sido registrado con el n√∫mero: ${appointmentId}\\n\\n` +\n                     `üìã Detalles:\\n` +\n                     (patientName ? `üë§ Paciente: ${patientName}\\n` : `üë§ DNI: ${userData.dni}\\n`) +\n                     `üè• Especialidad: ${userData.especialidad.descripcion}\\n` +\n                     `üìÖ D√≠a: ${userData.diaSeleccionado.descripcion}\\n` +\n                     `üïê Horario: ${userData.horarioSeleccionado.descripcion}\\n\\n` +\n                     `üìû Recibir√° una confirmaci√≥n adicional por WhatsApp.\\n\\n` +\n                     `üîÑ Para solicitar otro turno, env√≠e cualquier mensaje.`;\n                     \n    console.log('‚úÖ SUCCESS MESSAGE: Generated success response');\n  } else {\n    responseMessage = \"‚ùå Error al procesar la solicitud\\n\\nPor favor intente nuevamente m√°s tarde o comun√≠quese directamente con la cl√≠nica.\";\n    // Keep in confirmation state to allow retry\n    allSessions[chatId].estado = \"ESPERANDO_CONFIRMACION\";\n    console.log('‚ùå ERROR MESSAGE: Generated error response');\n  }\n} catch (error) {\n  console.log('‚ùå API Submission Error:', error.message);\n  console.log('‚ùå Error stack:', error.stack);\n  responseMessage = \"‚ùå Error al procesar la solicitud\\n\\nPor favor intente nuevamente m√°s tarde o comun√≠quese directamente con la cl√≠nica.\";\n  allSessions[chatId].estado = \"ESPERANDO_CONFIRMACION\";\n}\n\n// Clean message for WhatsApp\nlet cleanedMessage = responseMessage\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\nconsole.log('üì§ Final response message:', cleanedMessage);\n\nreturn {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    success: success,\n    appointmentId: appointmentId,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        860
      ],
      "id": "12d54b51-38f4-4ccc-aa43-08fc8529d0a8",
      "name": "Process API Result"
    },
    {
      "parameters": {
        "jsCode": "// Merge All Responses\nconst stateData = $('Process State Logic').first().json;\n\nconsole.log('üîÑ Merge Responses: Starting with state data:', JSON.stringify(stateData, null, 2));\nconsole.log('üîÑ Merge Responses: isValid =', stateData.isValid);\n\n// Check if we have responses from other nodes\nlet finalResponse = stateData.response;\nlet finalAllSessions = stateData.allSessions;\n\n// CRITICAL FIX: If validation failed (isValid = false), use the error message from Process State Logic directly\nif (stateData.isValid === false) {\n  console.log('‚ùå Merge Responses: Validation failed, using error response directly');\n  console.log('‚ùå Error response message:', stateData.response.message);\n  \n  // Use the error response from Process State Logic directly\n  return {\n    json: {\n      chatId: stateData.chatId,\n      response: stateData.response,\n      allSessions: stateData.allSessions,\n      timestamp: new Date().toISOString(),\n      source: 'error_routing'\n    }\n  };\n}\n\n// For valid responses, check for results from processing nodes\nconsole.log('‚úÖ Merge Responses: Validation passed, checking processing nodes');\n\n// Check for DNI validation result\ntry {\n  const dniResult = $('Process DNI Result').first()?.json;\n  if (dniResult && dniResult.response) {\n    console.log('üìã Using DNI result response');\n    finalResponse = dniResult.response;\n    finalAllSessions = dniResult.allSessions;\n  }\n} catch (error) {\n  console.log('‚ö†Ô∏è No DNI result available');\n}\n\n// Check for days result\ntry {\n  const daysResult = $('Process Days Result').first()?.json;\n  if (daysResult && daysResult.response) {\n    console.log('üìã Using Days result response');\n    finalResponse = daysResult.response;\n    finalAllSessions = daysResult.allSessions;\n  }\n} catch (error) {\n  console.log('‚ö†Ô∏è No Days result available');\n}\n\n// Check for hours result\ntry {\n  const hoursResult = $('Process Hours Result').first()?.json;\n  if (hoursResult && hoursResult.response) {\n    console.log('üìã Using Hours result response');\n    finalResponse = hoursResult.response;\n    finalAllSessions = hoursResult.allSessions;\n  }\n} catch (error) {\n  console.log('‚ö†Ô∏è No Hours result available');\n}\n\n// Check for API submission result\ntry {\n  const apiResult = $('Process API Result').first()?.json;\n  if (apiResult && apiResult.response) {\n    console.log('üìã Using API result response');\n    finalResponse = apiResult.response;\n    finalAllSessions = apiResult.allSessions;\n  }\n} catch (error) {\n  console.log('‚ö†Ô∏è No API result available');\n}\n\nconsole.log('üì§ Merge Responses: Final response:', JSON.stringify(finalResponse, null, 2));\n\nreturn {\n  json: {\n    chatId: stateData.chatId,\n    response: finalResponse,\n    allSessions: finalAllSessions,\n    timestamp: new Date().toISOString(),\n    source: 'normal_flow'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -140,
        580
      ],
      "id": "2bba3e76-117c-482a-9478-d5efc0277d64",
      "name": "Merge Responses"
    },
    {
      "parameters": {
        "jsCode": "// Update Session - MANEJO DE USUARIOS NUEVOS\nconst mergeData = $('Merge Responses').first().json;\nconst chatId = mergeData.chatId;\nconst newState = mergeData.allSessions[chatId]?.estado;\nconst sessionData = mergeData.allSessions[chatId]?.datos;\n\n// Obtener JSONBin actual o crear estructura vac√≠a si no existe\nlet allSessions = {};\ntry {\n  // En este punto ya tenemos los datos procesados de mergeData\n  allSessions = mergeData.allSessions;\n  console.log('‚úÖ JSONBin data loaded, total users:', Object.keys(allSessions).length);\n} catch (error) {\n  console.log('‚ùå Error reading JSONBin, creating new structure:', error.message);\n  allSessions = {};\n}\n\n// Crear o actualizar sesi√≥n del usuario\nconst isNewUser = !allSessions[chatId]?.createdAt;\n\nif (allSessions[chatId]) {\n  allSessions[chatId] = {\n    chatId: chatId,\n    estado: newState,\n    datos: sessionData,\n    createdAt: isNewUser ? new Date().toISOString() : (allSessions[chatId]?.createdAt || new Date().toISOString()),\n    updatedAt: new Date().toISOString(),\n    lastActivity: new Date().toISOString()\n  };\n}\n\nconsole.log(isNewUser ? 'üÜï Created new user session' : 'üîÑ Updated existing user session');\nconsole.log('User state:', newState);\nconsole.log('Session data:', JSON.stringify(sessionData, null, 2));\n\n// Preparar estructura completa para JSONBin\nconst jsonbinData = {\n  sessions: allSessions\n};\n\nreturn {\n  json: {\n    chatId: chatId,\n    jsonbinData: jsonbinData,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        240
      ],
      "id": "183e4c03-c5a8-4350-bcdc-9a154c6ff07b",
      "name": "Prepare JSONBin Update"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.jsonbinData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        300,
        160
      ],
      "id": "779bc951-6695-4616-b667-ffbd4d5a272b",
      "name": "Update JSONBin"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for WhatsApp\nconst mergeData = $('Merge Responses').first().json;\n\nreturn {\n  json: {\n    chatId: mergeData.chatId,\n    message: mergeData.response.message\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        600
      ],
      "id": "0526c572-d7bb-493c-93dc-c5b444addc9f",
      "name": "Prepare WhatsApp Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://waapi.app/api/v1/instances/76556/client/action/send-message ",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer RnfskkYrbR0Sh2Acnr5B9GwPDl545m1jPPKDbccoa2ab2e89"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chatId\": {{ JSON.stringify($json.chatId) }},\n  \"message\": {{ JSON.stringify($json.message) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        440
      ],
      "id": "3187b0c9-6ed5-43ac-b360-103081b802f0",
      "name": "Send WhatsApp"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Start": {
      "main": [
        [
          {
            "node": "Parse Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Message": {
      "main": [
        [
          {
            "node": "Get Auth Token",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get User Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Auth Token": {
      "main": [
        [
          {
            "node": "Get Especialidades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Session": {
      "main": [
        [
          {
            "node": "Process State Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process State Logic": {
      "main": [
        [
          {
            "node": "Check Initial State",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check DNI Validation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Days Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Hours Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check API Submission",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Confirmation Display",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Error Routing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check DNI Validation": {
      "main": [
        [
          {
            "node": "Validate DNI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate DNI": {
      "main": [
        [
          {
            "node": "Process DNI Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process DNI Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Days Data": {
      "main": [
        [
          {
            "node": "Get Days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Days": {
      "main": [
        [
          {
            "node": "Process Days Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Days Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Hours Data": {
      "main": [
        [
          {
            "node": "Get Hours",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Hours": {
      "main": [
        [
          {
            "node": "Process Hours Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Hours Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Submission": {
      "main": [
        [
          {
            "node": "Submit Turno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Confirmation Display": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Error Routing": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Initial State": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Submit Turno": {
      "main": [
        [
          {
            "node": "Process API Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process API Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Responses": {
      "main": [
        [
          {
            "node": "Prepare JSONBin Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare JSONBin Update": {
      "main": [
        [
          {
            "node": "Update JSONBin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update JSONBin": {
      "main": [
        [
          {
            "node": "Prepare WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare WhatsApp Message": {
      "main": [
        [
          {
            "node": "Send WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e2ec1796-8890-40c1-8f44-36dd06e71ec0",
  "meta": {
    "instanceId": "556514cf317cac5c724bf084ccbb32127ff27cc56f225fb39f131295f3c7f3d0"
  },
  "id": "v8eKjjtCYC1WyQw8",
  "tags": []
}
{
  "name": "A_SalmaTurnos",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ac247fd3-9ca7-42a3-8942-7ea8c321c46d",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2080,
        860
      ],
      "id": "e2449639-f9ab-4be9-a4b7-1feb5c06281e",
      "name": "Webhook",
      "webhookId": "ac247fd3-9ca7-42a3-8942-7ea8c321c46d"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst message = items[0].json.body.data.message;\n\n\n\nif (!message) {\n  return [{ json: { error: \"No message found\" } }];\n}\n\nif (message.type !=='chat') {\n  return null;\n}\n\n\n\n\nconst chatId = message.from;\nconst messageText = message.body?.trim();\nconst messageId = message.id;\n\n// Limpiar chatId - remover @c.us si existe\n// if (chatId.includes('@c.us')) {\n//   chatId = chatId.replace('@c.us', '');\n// }\n\n// Tambi√©n limpiar otros formatos posibles\n// chatId = chatId.replace('@g.us', '').replace('@newsletter', '');\n\nreturn {\n  json: {\n    chatId: chatId,\n    messageText: messageText,\n    messageId: messageId,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1660,
        800
      ],
      "id": "031c00ec-65fb-4330-9936-5fb2a08fc6e0",
      "name": "menssageIn"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Get User Session (JSONBin version)\nconst chatId = $('menssageIn').first().json.chatId;\nconst messageText = $('menssageIn').first().json.messageText;\n\n// Los datos vienen del HTTP Request \"Read JSONBin\"\nlet allSessions = {};\nlet userSession = null;\n\ntry {\n  // JSONBin devuelve la data en $json.record.sessions\n   const jsonbinData = $('Read JSONBin').first().json;\n  \n if (jsonbinData.record) {\n    allSessions = jsonbinData.record;  // Los datos est√°n directamente en record\n    userSession = allSessions[chatId];\n    console.log('Sesiones en JSONBin:', Object.keys(allSessions).length);\n    console.log('Sesi√≥n encontrada:', userSession ? 'S√ç' : 'NO');\n}\n  \n  console.log('=== JSONBin READ ===');\n  console.log('ChatId buscado:', chatId);\n  console.log('Total sesiones:', Object.keys(allSessions).length);\n  console.log('Sesi√≥n encontrada:', userSession ? 'S√ç' : 'NO');\n  if (userSession) {\n    console.log('Estado actual:', userSession.estado);\n  }\n  console.log('==================');\n} catch (error) {\n  console.log('Error leyendo JSONBin:', error.message);\n}\n\nif (!userSession) {\n  userSession = {\n    chatId: chatId,\n    estado: \"INICIO\",\n    datos: {},\n    createdAt: new Date().toISOString(),\n    lastActivity: new Date().toISOString()\n  };\n  console.log('==> Creando NUEVA sesi√≥n');\n} else {\n  userSession.lastActivity = new Date().toISOString();\n  console.log('==> Sesi√≥n EXISTENTE, estado:', userSession.estado);\n}\n\nreturn {\n  json: {\n    chatId: chatId,\n    messageText: messageText,\n    userSession: userSession,\n    debug: {\n      sessionExists: !!allSessions[chatId],\n      currentState: userSession.estado\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1320,
        560
      ],
      "id": "1f8a651c-d627-4740-a489-6ce590e97724",
      "name": "Get User Session"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Process Step Logic (CON SELECCI√ìN M√öLTIPLE Y VALIDACI√ìN DNI MEJORADA)\nconst messageText = $json.messageText.toLowerCase();\nconst userSession = $json.userSession;\nconst chatId = $json.chatId;\nconst maestros = $('Maestros').first().json;\n\nlet response = {};\nlet newEstado = userSession.estado;\nlet updateData = { ...userSession.datos };\nlet isValid = true;\nlet errorMessage = \"\";\n\n// Funci√≥n auxiliar para parsear selecci√≥n m√∫ltiple\nfunction parseMultipleSelection(input, validOptions) {\n  console.log('=== PARSE MULTIPLE SELECTION ===');\n  console.log('Input:', input);\n  console.log('Valid options:', Object.keys(validOptions));\n  \n  if (!input || typeof input !== 'string') {\n    console.log('Invalid input type');\n    return {\n      valid: false,\n      selections: [],\n      invalidItems: [input]\n    };\n  }\n  \n  const selections = input.split(',').map(item => item.trim()).filter(item => item.length > 0);\n  const validSelections = [];\n  const invalidItems = [];\n  \n  console.log('Parsed selections:', selections);\n  \n  for (const selection of selections) {\n    if (validOptions.hasOwnProperty(selection)) {\n      validSelections.push({\n        id: selection,\n        value: validOptions[selection]\n      });\n      console.log(`Valid selection: ${selection} -> ${validOptions[selection]}`);\n    } else {\n      invalidItems.push(selection);\n      console.log(`Invalid selection: ${selection}`);\n    }\n  }\n  \n  const result = {\n    valid: invalidItems.length === 0 && validSelections.length > 0,\n    selections: validSelections,\n    invalidItems: invalidItems\n  };\n  \n  console.log('Final result:', JSON.stringify(result, null, 2));\n  console.log('================================');\n  \n  return result;\n}\n\nswitch (userSession.estado) {\n  case \"INICIO\":\n    // Cualquier mensaje inicia el proceso\n    response = {\n      message: \"üè• *Bienvenido al Sistema de Turnos*\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\",\n      nextStep: \"ESPERANDO_DNI\"\n    };\n    newEstado = \"ESPERANDO_DNI\";\n    break;\n\n  case \"COMPLETADO\":\n    // NUEVO CASO: Usuario que ya complet√≥ un turno quiere hacer otro\n    console.log('=== REINICIANDO USUARIO COMPLETADO ===');\n    console.log('Usuario:', chatId);\n    console.log('Estado anterior:', userSession.estado);\n    console.log('Datos anteriores:', JSON.stringify(userSession.datos, null, 2));\n    \n    // Limpiar datos y reiniciar\n    updateData = {};\n    response = {\n      message: \"üè• *Bienvenido nuevamente al Sistema de Turnos*\\n\\n¬øDesea agendar un nuevo turno?\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\",\n      nextStep: \"ESPERANDO_DNI\"\n    };\n    newEstado = \"ESPERANDO_DNI\";\n    \n    console.log('Nuevo estado:', newEstado);\n    console.log('Datos limpiados:', JSON.stringify(updateData, null, 2));\n    console.log('=====================================');\n    break;\n\n  case \"ESPERANDO_DNI\":\n    const dniInput = $json.messageText.trim();\n    \n    console.log('=== VALIDACI√ìN DNI DEBUG ===');\n    console.log('Input original:', JSON.stringify(dniInput));\n    console.log('Input length:', dniInput.length);\n    console.log('Input chars:', dniInput.split('').map(c => c.charCodeAt(0)));\n    \n    // Limpiar DNI: quitar espacios, puntos, comas, guiones\n    const cleanDNI = dniInput\n      .replace(/\\s+/g, '')        // Quitar espacios\n      .replace(/\\./g, '')         // Quitar puntos\n      .replace(/,/g, '')          // Quitar comas  \n      .replace(/-/g, '')          // Quitar guiones\n      .replace(/[^\\d]/g, '');     // Quitar cualquier car√°cter que no sea d√≠gito\n    \n    console.log('DNI limpio:', cleanDNI);\n    console.log('DNI length:', cleanDNI.length);\n    console.log('Es solo n√∫meros:', /^\\d+$/.test(cleanDNI));\n    console.log('===========================');\n    \n    // Validar DNI limpio (solo n√∫meros, 7-8 d√≠gitos)\n    if (!cleanDNI || cleanDNI.length < 7 || cleanDNI.length > 8 || !/^\\d+$/.test(cleanDNI)) {\n      isValid = false;\n      errorMessage = `‚ùå *DNI inv√°lido*\\n\\nPor favor ingrese solo n√∫meros, entre 7 y 8 d√≠gitos.\\n\\nüìù *Formatos aceptados:*\\n‚Ä¢ 25430441\\n‚Ä¢ 25.430.441\\n‚Ä¢ 25 430 441\\n\\n‚ö†Ô∏è *Su entrada:* \"${dniInput}\"\\nüí° *Procesado como:* \"${cleanDNI}\"`;\n      \n      console.log('‚ùå DNI INV√ÅLIDO - Raz√≥n:', {\n        empty: !cleanDNI,\n        tooShort: cleanDNI.length < 7,\n        tooLong: cleanDNI.length > 8,\n        notNumbers: !/^\\d+$/.test(cleanDNI),\n        length: cleanDNI.length\n      });\n    } else {\n      updateData.dni = cleanDNI; // Guardar DNI limpio\n      \n      console.log('‚úÖ DNI V√ÅLIDO:', cleanDNI);\n      \n      // Obtener especialidades del maestro\n      const especialidades = maestros.especialidades;\n      \n      let especialidadesText = \"üë®‚Äç‚öïÔ∏è *Seleccione una especialidad:*\\n\\n\";\n      especialidades.forEach(esp => {\n        especialidadesText += `${esp.idEspecialidad}. ${esp.descripcion}\\n`;\n      });\n      \n      response = {\n        message: especialidadesText,\n        nextStep: \"ESPERANDO_ESPECIALIDAD\"\n      };\n      newEstado = \"ESPERANDO_ESPECIALIDAD\";\n    }\n    break;\n\n  case \"ESPERANDO_ESPECIALIDAD\":\n    const especialidadId = parseInt($json.messageText.trim());\n    const especialidad = maestros.especialidades.find(e => e.idEspecialidad === especialidadId);\n    \n    if (!especialidad) {\n      isValid = false;\n      let opciones = maestros.especialidades.map(e => `${e.idEspecialidad}. ${e.descripcion}`).join('\\n');\n      errorMessage = `‚ùå *No se reconoce el valor ingresado*\\n\\nOpciones v√°lidas:\\n${opciones}`;\n    } else {\n      updateData.especialidad = especialidad;\n      \n      // Convertir objeto d√≠as a array para mostrar\n      const diasObj = maestros.dias;\n      let diasText = \"üìÖ *Seleccione uno o m√°s d√≠as:*\\n\\n\";\n      Object.keys(diasObj).forEach(key => {\n        diasText += `${key}. ${diasObj[key]}\\n`;\n      });\n      diasText += \"\\nüí° *Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas*\\n\";\n      diasText += \"Ejemplo: 1,3,5\";\n      \n      response = {\n        message: diasText,\n        nextStep: \"ESPERANDO_DIA\"\n      };\n      newEstado = \"ESPERANDO_DIA\";\n    }\n    break;\n\n  case \"ESPERANDO_DIA\":\n    const diasInput = $json.messageText.trim();\n    const diasObj = maestros.dias;\n    const diasResult = parseMultipleSelection(diasInput, diasObj);\n    \n    if (!diasResult.valid || diasResult.selections.length === 0) {\n      isValid = false;\n      let opciones = Object.keys(diasObj).map(key => `${key}. ${diasObj[key]}`).join('\\n');\n      let errorMsg = `‚ùå *No se reconoce el valor ingresado*\\n\\nOpciones v√°lidas:\\n${opciones}\\n\\n`;\n      if (diasResult.invalidItems.length > 0) {\n        errorMsg += `Valores inv√°lidos: ${diasResult.invalidItems.join(', ')}\\n`;\n      }\n      errorMsg += \"üí° Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas\\nEjemplo: 1,3,5\";\n      errorMessage = errorMsg;\n    } else {\n      updateData.dias = diasResult.selections;\n      \n      console.log('=== DIAS SELECTION DEBUG ===');\n      console.log('Input:', diasInput);\n      console.log('Parsed result:', JSON.stringify(diasResult, null, 2));\n      console.log('Stored in updateData.dias:', JSON.stringify(updateData.dias, null, 2));\n      console.log('============================');\n      \n      // Convertir objeto rangos horarios a array para mostrar\n      const horariosObj = maestros.rangosHorarios;\n      let horariosText = \"üïê *Seleccione uno o m√°s rangos de horario:*\\n\\n\";\n      Object.keys(horariosObj).forEach(key => {\n        horariosText += `${key}. ${horariosObj[key]}\\n`;\n      });\n      horariosText += \"\\nüí° *Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas*\\n\";\n      horariosText += \"Ejemplo: 1,2,4\";\n      \n      response = {\n        message: horariosText,\n        nextStep: \"ESPERANDO_HORARIO\"\n      };\n      newEstado = \"ESPERANDO_HORARIO\";\n    }\n    break;\n\n  case \"ESPERANDO_HORARIO\":\n    const horariosInput = $json.messageText.trim();\n    const horariosObj = maestros.rangosHorarios;\n    const horariosResult = parseMultipleSelection(horariosInput, horariosObj);\n    \n    if (!horariosResult.valid || horariosResult.selections.length === 0) {\n      isValid = false;\n      let opciones = Object.keys(horariosObj).map(key => `${key}. ${horariosObj[key]}`).join('\\n');\n      let errorMsg = `‚ùå *No se reconoce el valor ingresado*\\n\\nOpciones v√°lidas:\\n${opciones}\\n\\n`;\n      if (horariosResult.invalidItems.length > 0) {\n        errorMsg += `Valores inv√°lidos: ${horariosResult.invalidItems.join(', ')}\\n`;\n      }\n      errorMsg += \"üí° Puede seleccionar m√∫ltiples opciones separ√°ndolas con comas\\nEjemplo: 1,2,4\";\n      errorMessage = errorMsg;\n    } else {\n      updateData.horarios = horariosResult.selections;\n      \n      console.log('=== HORARIOS SELECTION DEBUG ===');\n      console.log('Input:', horariosInput);\n      console.log('Parsed result:', JSON.stringify(horariosResult, null, 2));\n      console.log('Stored in updateData.horarios:', JSON.stringify(updateData.horarios, null, 2));\n      console.log('================================');\n      \n      // Mostrar resumen y confirmaci√≥n con m√∫ltiples selecciones\n      const diasSeleccionados = updateData.dias.map(d => d.value).join(', ');\n      const horariosSeleccionados = updateData.horarios.map(h => h.value).join(', ');\n      \n      const resumen = `üìã *Resumen del Turno:*\\n\\n` +\n                     `üë§ DNI: ${updateData.dni}\\n` +\n                     `üë®‚Äç‚öïÔ∏è Especialidad: ${updateData.especialidad.descripcion}\\n` +\n                     `üìÖ D√≠as: ${diasSeleccionados}\\n` +\n                     `üïê Horarios: ${horariosSeleccionados}\\n\\n` +\n                     `*¬øConfirma el turno?*\\n\\n` +\n                     `1. ‚úÖ Aceptar\\n` +\n                     `2. ‚ùå Cancelar`;\n      \n      response = {\n        message: resumen,\n        nextStep: \"CONFIRMACION\"\n      };\n      newEstado = \"CONFIRMACION\";\n    }\n    break;\n\n  case \"CONFIRMACION\":\n    const confirmacion = parseInt($json.messageText.trim());\n    \n    if (confirmacion === 1) {\n      // Aceptar - preparar para env√≠o a API\n      response = {\n        message: \"‚úÖ *Turno confirmado*\\n\\nProcesando su solicitud...\",\n        nextStep: \"COMPLETADO\",\n        sendToAPI: true\n      };\n      newEstado = \"COMPLETADO\";\n    } else if (confirmacion === 2) {\n      // Cancelar - reiniciar proceso\n      updateData = {};\n      response = {\n        message: \"‚ùå *Turno cancelado*\\n\\n¬øDesea agendar un nuevo turno?\\n\\nEnv√≠e cualquier mensaje para comenzar.\",\n        nextStep: \"INICIO\"\n      };\n      newEstado = \"INICIO\";\n    } else {\n      isValid = false;\n      errorMessage = \"‚ùå *No se reconoce el valor ingresado*\\n\\nOpciones v√°lidas:\\n1. ‚úÖ Aceptar\\n2. ‚ùå Cancelar\";\n    }\n    break;\n\n  default:\n    // Estado desconocido, reiniciar\n    console.log('=== ESTADO DESCONOCIDO - REINICIANDO ===');\n    console.log('Estado actual:', userSession.estado);\n    console.log('======================================');\n    \n    response = {\n      message: \"üè• *Bienvenido al Sistema de Turnos*\\n\\nPor favor, indique su DNI (solo n√∫meros, sin puntos):\",\n      nextStep: \"ESPERANDO_DNI\"\n    };\n    newEstado = \"ESPERANDO_DNI\";\n    updateData = {};\n}\n\n// APLICAR LIMPIEZA DE CARACTERES (CORREGIDA)\nlet finalMessage = isValid ? response.message : errorMessage;\n\n// Limpiar caracteres especiales para WAAPI pero mantener saltos de l√≠nea\nlet cleanedResponse = finalMessage\n  // Quitamos los encabezados #\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  // Quitamos asteriscos de negrita\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  // Simplificamos listados\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\n// NO aplicar JSON.stringify para mantener los saltos de l√≠nea\n// cleanedResponse = JSON.stringify(cleanedResponse).slice(1, -1);\n\n// Resultado final\nreturn {\n  json: {\n    chatId: chatId,\n    isValid: isValid,\n    response: {\n      message: cleanedResponse, // Mensaje limpio para WAAPI\n      sendToAPI: response.sendToAPI || false\n    },\n    newEstado: isValid ? newEstado : userSession.estado,\n    updateData: isValid ? updateData : userSession.datos,\n    sendToAPI: response.sendToAPI || false,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1080,
        540
      ],
      "id": "13e42605-f47c-4cee-8cb3-f15ffef1d71f",
      "name": "Process Step Logic"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"especialidades\":[\n    {\n      \"idEspecialidad\": 1,\n      \"descripcion\": \"Cardiolog√≠a\",\n      \"turnosIntervalo\": 30\n    },\n    {\n      \"idEspecialidad\": 2,\n      \"descripcion\": \"Cl√≠nico\",\n      \"turnosIntervalo\": 30\n    },\n    {\n      \"idEspecialidad\": 3,\n      \"descripcion\": \"Traumatolog√≠a\",\n      \"turnosIntervalo\": 30\n    },\n    {\n      \"idEspecialidad\": 4,\n      \"descripcion\": \"Gastro\",\n      \"turnosIntervalo\": 30\n    },\n    {\n      \"idEspecialidad\": 5,\n      \"descripcion\": \"Otorrinolaringolog√≠a\",\n      \"turnosIntervalo\": 30\n    }\n  ],  \n  \"dias\":{\n  \"1\": \"LUNES\",\n  \"2\": \"MARTES\",\n  \"3\": \"MI√âRCOLES\",\n  \"4\": \"JUEVES\",\n  \"5\": \"VIERNES\",\n  \"6\": \"S√ÅBADO\"\n  },\n  \"rangosHorarios\":{\n  \"1\": \"07-09 hs.\",\n  \"2\": \"09-11 hs.\",\n  \"3\": \"11-13 hs.\",\n  \"4\": \"13-15 hs.\",\n  \"5\": \"15-17 hs.\",\n  \"6\": \"17-19 hs.\"\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1340,
        320
      ],
      "id": "5094c62e-c839-414f-aee3-c1c814322bc6",
      "name": "Maestros"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Update User Session (CORREGIDO PARA JSONBIN)\nconst processData = $json;\nconst chatId = processData.chatId;\nconst newEstado = processData.newEstado;\nconst updateData = processData.updateData;\n\n// Obtener las sesiones actuales desde JSONBin\nlet allSessions = {};\ntry {\n  const jsonbinData = $('Read JSONBin').first().json;\n  if (jsonbinData && jsonbinData.record) {\n    allSessions = { ...jsonbinData.record };\n  }\n  console.log('=== UPDATE USER SESSION ===');\n  console.log('ChatId a actualizar:', chatId);\n  console.log('Nuevo estado:', newEstado);\n  console.log('Datos a actualizar:', JSON.stringify(updateData, null, 2));\n  console.log('Sesiones existentes:', Object.keys(allSessions).length);\n} catch (error) {\n  console.error('Error obteniendo sesiones de JSONBin:', error);\n}\n\n// Actualizar o crear la sesi√≥n del usuario\nallSessions[chatId] = {\n  chatId: chatId,\n  estado: newEstado,\n  datos: updateData,\n  createdAt: allSessions[chatId]?.createdAt || new Date().toISOString(),\n  lastActivity: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\nconsole.log('=== SESI√ìN ACTUALIZADA ===');\nconsole.log('Sesi√≥n del usuario:', JSON.stringify(allSessions[chatId], null, 2));\nconsole.log('Total sesiones despu√©s de actualizar:', Object.keys(allSessions).length);\nconsole.log('============================');\n\n// Preparar estructura para JSONBin\nconst jsonbinPayload = {\n  sessions: allSessions\n};\n\nreturn {\n  json: jsonbinPayload\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -820,
        500
      ],
      "id": "c223835d-72f0-496f-94b5-bcee9e2f43aa",
      "name": "Update User Session"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Prepare API Request (CON VALIDACI√ìN MEJORADA)\nconst processStepData = $('Process Step Logic').first().json;\nconst jsonbinData = $json;\n\nconsole.log('=== PREPARE API REQUEST DEBUG ===');\nconsole.log('Process Step Data:', JSON.stringify(processStepData, null, 2));\nconsole.log('JSONBin Data keys:', Object.keys(jsonbinData));\nconsole.log('Send to API from Process Step:', processStepData.sendToAPI);\nconsole.log('================================');\n\n// VALIDACI√ìN PRINCIPAL: Verificar si debe enviar a API desde Process Step Logic\nif (!processStepData.sendToAPI) {\n  console.log('‚ùå SKIPPING API - Process Step Logic says sendToAPI = false');\n  return {\n    json: {\n      skipAPI: true,\n      reason: \"Process Step Logic indicates no API call needed\",\n      processStepData: processStepData\n    }\n  };\n}\n\n// Obtener datos de la sesi√≥n actualizada\nlet userSession = null;\nlet sendToAPI = false;\n\ntry {\n  // Los datos vienen en record desde JSONBin\n  if (jsonbinData.record) {\n    const sessions = jsonbinData.record;\n    \n    // Buscar la sesi√≥n que coincida con el chatId del Process Step Logic\n    const targetChatId = processStepData.chatId;\n    \n    if (sessions[targetChatId]) {\n      userSession = sessions[targetChatId];\n      \n      // VALIDACI√ìN CR√çTICA: Solo enviar a API si est√° en estado COMPLETADO Y Process Step Logic lo confirma\n      if (userSession.estado === \"COMPLETADO\" && processStepData.sendToAPI === true) {\n        sendToAPI = true;\n      }\n    }\n  }\n  \n  console.log('=== SESSION VALIDATION ===');\n  console.log('Target ChatId:', processStepData.chatId);\n  console.log('User session found:', !!userSession);\n  console.log('User session state:', userSession?.estado);\n  console.log('Send to API decision:', sendToAPI);\n  console.log('========================');\n  \n} catch (error) {\n  console.error('Error extrayendo datos de JSONBin:', error);\n  return {\n    json: {\n      skipAPI: true,\n      error: \"Error extrayendo datos de JSONBin: \" + error.message\n    }\n  };\n}\n\n// Verificar si debe enviar a API\nif (!sendToAPI || !userSession || !userSession.datos || !userSession.datos.dni) {\n  console.log('‚ùå SKIPPING API - Validation failed');\n  console.log('sendToAPI:', sendToAPI);\n  console.log('userSession exists:', !!userSession);\n  console.log('userSession.datos exists:', !!userSession?.datos);\n  console.log('DNI exists:', !!userSession?.datos?.dni);\n  \n  return {\n    json: {\n      skipAPI: true,\n      message: \"No se requiere env√≠o a API - validaci√≥n fallida\",\n      debugInfo: {\n        sendToAPI,\n        hasUserSession: !!userSession,\n        hasUserData: !!userSession?.datos,\n        hasDNI: !!userSession?.datos?.dni,\n        userState: userSession?.estado\n      }\n    }\n  };\n}\n\n// Preparar arrays de d√≠as y horarios desde las selecciones m√∫ltiples\nlet diasArray = [];\nlet horariosArray = [];\n\nconsole.log('=== DEBUGGING SELECTION DATA ===');\nconsole.log('userSession.datos:', JSON.stringify(userSession.datos, null, 2));\nconsole.log('dias exists:', !!userSession.datos.dias);\nconsole.log('horarios exists:', !!userSession.datos.horarios);\n\n// Extraer d√≠as seleccionados con validaci√≥n robusta\nif (userSession.datos.dias && Array.isArray(userSession.datos.dias)) {\n  console.log('Processing multiple dias:', userSession.datos.dias);\n  diasArray = userSession.datos.dias\n    .filter(dia => dia && dia.id !== undefined && dia.id !== null)\n    .map(dia => parseInt(dia.id));\n} else if (userSession.datos.dia && userSession.datos.dia.id) {\n  // Compatibilidad con versi√≥n anterior (selecci√≥n √∫nica)\n  console.log('Processing single dia:', userSession.datos.dia);\n  diasArray = [parseInt(userSession.datos.dia.id)];\n}\n\n// Extraer horarios seleccionados con validaci√≥n robusta\nif (userSession.datos.horarios && Array.isArray(userSession.datos.horarios)) {\n  console.log('Processing multiple horarios:', userSession.datos.horarios);\n  horariosArray = userSession.datos.horarios\n    .filter(horario => horario && horario.id !== undefined && horario.id !== null)\n    .map(horario => parseInt(horario.id));\n} else if (userSession.datos.horario && userSession.datos.horario.id) {\n  // Compatibilidad con versi√≥n anterior (selecci√≥n √∫nica)\n  console.log('Processing single horario:', userSession.datos.horario);\n  horariosArray = [parseInt(userSession.datos.horario.id)];\n}\n\nconsole.log('Final diasArray:', diasArray);\nconsole.log('Final horariosArray:', horariosArray);\nconsole.log('===============================');\n\n// Preparar datos para API seg√∫n formato requerido\nconst apiData = {\n  documento: userSession.datos.dni,\n  telefono: userSession.chatId.split('@')[0],\n  idEspecialidad: userSession.datos.especialidad.idEspecialidad,\n  dias: diasArray,\n  rangosHorarios: horariosArray\n};\n\nconsole.log('=== API DATA PREPARED (VALIDATED) ===');\nconsole.log('D√≠as seleccionados:', diasArray);\nconsole.log('Horarios seleccionados:', horariosArray);\nconsole.log('API Data:', JSON.stringify(apiData, null, 2));\nconsole.log('====================================');\n\n// Validar que tenemos al menos una selecci√≥n de cada\nif (diasArray.length === 0 || horariosArray.length === 0) {\n  console.error('‚ùå Error: No hay d√≠as u horarios seleccionados');\n  return {\n    json: {\n      skipAPI: true,\n      error: \"Error: Faltan d√≠as u horarios seleccionados\"\n    }\n  };\n}\n\nreturn {\n  json: {\n    skipAPI: false,\n    apiData: apiData,\n    chatId: userSession.chatId,\n    userSession: userSession,\n    selectionSummary: {\n      diasCount: diasArray.length,\n      horariosCount: horariosArray.length,\n      totalCombinations: diasArray.length * horariosArray.length\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -180,
        580
      ],
      "id": "b15ef4ec-e30f-443f-8396-33ace27b0cfa",
      "name": "Prepare API Request"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Format Final Response (CORREGIDO PARA SELECCI√ìN M√öLTIPLE)\nconst skipAPI = $json.skipAPI || false;\nlet finalMessage = \"\";\nlet chatId = \"\";\n\n// Obtener chatId del flujo\ntry {\n  chatId = $('menssageIn').first().json.chatId || $('Get User Session').first().json.chatId;\n} catch {\n  chatId = \"unknown\";\n}\n\nif (skipAPI) {\n  // Si no se envi√≥ a API, obtener el mensaje del Process Step Logic\n  try {\n    const stepLogicResponse = $('Process Step Logic').first().json.response;\n    finalMessage = stepLogicResponse ? stepLogicResponse.message : \"Mensaje procesado correctamente\";\n  } catch {\n    finalMessage = \"Error al obtener respuesta del flujo\";\n  }\n} else {\n  // Respuesta de la API\n  const apiResponse = $json;\n  let userSession = null;\n  \n  // Obtener sesi√≥n de usuario\n  try {\n    userSession = $('Prepare API Request').first().json.userSession;\n  } catch {\n    userSession = null;\n  }\n  \n  console.log('=== FORMAT FINAL RESPONSE ===');\n  console.log('API Response:', JSON.stringify(apiResponse, null, 2));\n  console.log('User Session:', userSession ? 'Found' : 'Not found');\n  if (userSession) {\n    console.log('User Session Data:', JSON.stringify(userSession.datos, null, 2));\n  }\n  console.log('============================');\n  \n  // NUEVA CONDICI√ìN: La API devuelve un array con el ID del turno\n  if (apiResponse && (typeof apiResponse === 'number' || typeof apiResponse === 'string')) {\n    const turnoId = apiResponse;\n    \n    if (userSession && userSession.datos) {\n      // Construir mensaje con selecciones m√∫ltiples\n      let diasText = 'N/A';\n      let horariosText = 'N/A';\n      \n      // Manejar d√≠as (m√∫ltiples o √∫nico)\n      if (userSession.datos.dias && Array.isArray(userSession.datos.dias)) {\n        diasText = userSession.datos.dias.map(d => d.value).join(', ');\n      } else if (userSession.datos.dia && userSession.datos.dia.nombre) {\n        diasText = userSession.datos.dia.nombre;\n      }\n      \n      // Manejar horarios (m√∫ltiples o √∫nico)\n      if (userSession.datos.horarios && Array.isArray(userSession.datos.horarios)) {\n        horariosText = userSession.datos.horarios.map(h => h.value).join(', ');\n      } else if (userSession.datos.horario && userSession.datos.horario.rango) {\n        horariosText = userSession.datos.horario.rango;\n      }\n      \n      finalMessage = `‚úÖ ¬°Turno agendado exitosamente!\\\\n\\\\n` +\n                     `üé´ N√∫mero de turno: ${turnoId}\\\\n` +\n                     `üë§ DNI: ${userSession.datos.dni}\\\\n` +\n                     `üìû Tel√©fono: ${userSession.chatId.split('@')[0]}\\\\n` +\n                     `üë®‚Äç‚öïÔ∏è Especialidad: ${userSession.datos.especialidad ? userSession.datos.especialidad.descripcion : 'N/A'}\\\\n` +\n                     `üìÖ D√≠as: ${diasText}\\\\n` +\n                     `üïê Horarios: ${horariosText}\\\\n\\\\n` +\n                     `üì± Guarde este n√∫mero de turno para futuras consultas.\\\\n\\\\n` +\n                     `¬°Gracias por usar nuestro sistema!`;\n    } else {\n      finalMessage = `‚úÖ ¬°Turno agendado exitosamente!\\\\n\\\\nüé´ N√∫mero de turno: ${turnoId}`;\n    }\n  } else {\n    // Si no es un ID v√°lido, es un error\n    finalMessage = `‚ùå Error al agendar el turno\\\\n\\\\n` +\n                   `Lo sentimos, hubo un problema al procesar su solicitud.\\\\n` +\n                   `Por favor intente nuevamente m√°s tarde.\\\\n\\\\n` +\n                   `Error: ${typeof apiResponse === 'string' ? apiResponse : JSON.stringify(apiResponse) || 'Error desconocido'}`;\n  }\n}\n\n// APLICAR LIMPIEZA DE CARACTERES\nlet cleanedMessage = finalMessage\n  .replace(/^#+\\\\s+(.+)$/gm, \"$1\")\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\ncleanedMessage = JSON.stringify(cleanedMessage).slice(1, -1);\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: cleanedMessage,\n    messageType: \"text\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -260,
        920
      ],
      "id": "adabd3bb-4aef-42bb-9d86-e3275fb04756",
      "name": "Format Final Response"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/login",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"user\": \"admin\",\n  \"password\": \"1234\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -880,
        780
      ],
      "id": "b2ca5e25-b898-4b42-b839-50da33afc2d1",
      "name": "Get Token"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/solicitar",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Prepare API Request').first().json.apiData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -580,
        780
      ],
      "id": "1959dff5-a7e0-4e30-8a80-7f6c9e70d555",
      "name": "Send to API"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://waapi.app/api/v1/instances/76556/client/action/send-message",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer RnfskkYrbR0Sh2Acnr5B9GwPDl545m1jPPKDbccoa2ab2e89"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chatId\": \"{{ $json.chatId }}\",\n  \"message\": \"{{ $json.message }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        120,
        860
      ],
      "id": "56f39224-f22f-46c7-8506-a11c31abb2e7",
      "name": "Send WhatsApp Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://waapi.app/api/v1/instances/76556/client/action/send-typing",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer RnfskkYrbR0Sh2Acnr5B9GwPDl545m1jPPKDbccoa2ab2e89"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chatId\": \"{{ $json.body.data.message.from }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1780,
        440
      ],
      "id": "8c2bdcc2-1e5b-449a-9459-0a5828aa40d8",
      "name": "send-typing"
    },
    {
      "parameters": {
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e/latest",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1500,
        660
      ],
      "id": "2acfb3d0-2004-499d-9fb8-b9c9b4411bcb",
      "name": "Read JSONBin"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.sessions }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -560,
        480
      ],
      "id": "77db58dd-a6f3-48f0-b4b8-0996fe33c140",
      "name": "Write JSONBin"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "232f6117-6d57-40c2-a834-115089cb6dca",
              "leftValue": "={{ $json.skipAPI }}",
              "rightValue": "=true",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1160,
        960
      ],
      "id": "6b5257e8-ebbe-486b-aedc-68b7607c8e5b",
      "name": "API Decision"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "dni-validation-condition-simple",
              "leftValue": "={{ $('Get User Session').first().json.userSession.estado === 'ESPERANDO_DNI' && $json.newEstado === 'ESPERANDO_ESPECIALIDAD' && $json.isValid === true && $json.updateData.dni }}",
              "rightValue": "=true",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1040,
        300
      ],
      "id": "ac2cd15b-ffae-4add-875f-6c36b2e69162",
      "name": "DNI Validation Decision"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Update Session - DNI Validation\nconst processData = $json;\nconst chatId = processData.chatId;\nlet newEstado = processData.newEstado;\nlet updateData = processData.updateData;\n\n// Determinar fuente de datos - puede venir de Process Step Logic o Process DNI Validation\nlet sourceNode = null;\ntry {\n  // Intentar obtener datos de Process DNI Validation primero\n  const dniValidationData = $('Process DNI Validation').first();\n  if (dniValidationData && dniValidationData.json) {\n    sourceNode = 'Process DNI Validation';\n    newEstado = dniValidationData.json.newEstado;\n    updateData = dniValidationData.json.updateData;\n    chatId = dniValidationData.json.chatId;\n    console.log('üìã Usando datos de Process DNI Validation');\n  }\n} catch (error) {\n  console.log('‚ùå No se encontraron datos de Process DNI Validation:', error.message);\n}\n\n// Si no hay datos de validaci√≥n DNI, usar Process Step Logic\nif (!sourceNode) {\n  sourceNode = 'Process Step Logic';\n  console.log('üìã Usando datos de Process Step Logic');\n}\n\n// Obtener las sesiones actuales desde JSONBin\nlet allSessions = {};\ntry {\n  const jsonbinData = $('Read JSONBin').first().json;\n  if (jsonbinData && jsonbinData.record) {\n    allSessions = { ...jsonbinData.record };\n  }\n  console.log('=== UPDATE USER SESSION (DNI VALIDATION) ===');\n  console.log('Fuente de datos:', sourceNode);\n  console.log('ChatId a actualizar:', chatId);\n  console.log('Nuevo estado:', newEstado);\n  console.log('Datos a actualizar:', JSON.stringify(updateData, null, 2));\n  console.log('Sesiones existentes:', Object.keys(allSessions).length);\n} catch (error) {\n  console.error('Error obteniendo sesiones de JSONBin:', error);\n}\n\n// Actualizar o crear la sesi√≥n del usuario\nallSessions[chatId] = {\n  chatId: chatId,\n  estado: newEstado,\n  datos: updateData,\n  createdAt: allSessions[chatId]?.createdAt || new Date().toISOString(),\n  lastActivity: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n};\n\nconsole.log('=== SESI√ìN ACTUALIZADA (DNI VALIDATION) ===');\nconsole.log('Sesi√≥n del usuario:', JSON.stringify(allSessions[chatId], null, 2));\nconsole.log('Total sesiones despu√©s de actualizar:', Object.keys(allSessions).length);\nconsole.log('============================================');\n\n// Preparar estructura para JSONBin\nconst jsonbinPayload = {\n  sessions: allSessions\n};\n\nreturn {\n  json: jsonbinPayload\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        460
      ],
      "id": "ff3f4eb8-d9e6-4a72-b91c-dcb221a904a3",
      "name": "Update Session - DNI Validation"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.sessions }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        120,
        460
      ],
      "id": "3b8f78e5-86d2-4fdc-9d53-74b20d3a0a83",
      "name": "Write JSONBin 2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Format DNI Validation Response\nlet finalMessage = \"\";\nlet chatId = \"\";\n\n// Obtener datos de la validaci√≥n del DNI\ntry {\n  const dniValidationData = $('Process DNI Validation').first().json;\n  chatId = dniValidationData.chatId;\n  finalMessage = dniValidationData.response.message;\n  \n  console.log('=== FORMAT DNI VALIDATION RESPONSE ===');\n  console.log('ChatId:', chatId);\n  console.log('Message:', finalMessage);\n  console.log('Continue Flow:', dniValidationData.continueFlow);\n  console.log('=====================================');\n  \n} catch (error) {\n  console.error('Error obteniendo datos de DNI Validation:', error);\n  chatId = \"unknown\";\n  finalMessage = \"Error procesando validaci√≥n de DNI\";\n}\n\n// APLICAR LIMPIEZA DE CARACTERES\nlet cleanedMessage = finalMessage\n  .replace(/^#+\\\\s+(.+)$/gm, \"$1\")\n  .replace(/\\\\*\\\\*([^*]+)\\\\*\\\\*/g, \"$1\")\n  .replace(/^\\\\s*-\\\\s+/gm, \"- \");\n\ncleanedMessage = JSON.stringify(cleanedMessage).slice(1, -1);\n\nreturn {\n  json: {\n    chatId: chatId,\n    message: cleanedMessage,\n    messageType: \"text\"\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        360,
        460
      ],
      "id": "5373f9fd-fa9a-4b16-a756-c6faf034d9c0",
      "name": "Format DNI Validation Response"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/login",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"user\": \"admin\",\n  \"password\": \"1234\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        300
      ],
      "id": "27a01b5f-e648-4b39-9c4a-fc4a5067193f",
      "name": "DNI Validation - Get Token"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/paciente-by-documento/{{ $('Process Step Logic').first().json.updateData.dni }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -360,
        340
      ],
      "id": "04500589-fcec-4768-a1e3-f93c3820cf92",
      "name": "DNI Validation Request"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Nodo: Process DNI Validation Response\nconst dniValidationResponse = $json;\nconst processStepData = $('Process Step Logic').first().json;\nconst maestros = $('Maestros').first().json;\n\n// Obtener DNI desde m√∫ltiples fuentes para mayor robustez\nlet dni = processStepData.updateData?.dni;\nif (!dni) {\n  const getUserSessionData = $('Get User Session').first().json;\n  dni = getUserSessionData.messageText?.replace(/[^0-9]/g, '');\n}\n\nconsole.log('=== DNI VALIDATION RESPONSE ===');\nconsole.log('DNI being validated:', dni);\nconsole.log('API Response:', JSON.stringify(dniValidationResponse, null, 2));\nconsole.log('Process Step Data:', JSON.stringify(processStepData, null, 2));\nconsole.log('==============================');\n\nlet continueFlow = false;\nlet responseMessage = \"\";\nlet newEstado = processStepData.newEstado;\nlet pacienteInfo = null;\n\n// Verificar si el DNI fue encontrado en la API\nif (dniValidationResponse && (dniValidationResponse.id || dniValidationResponse.idPaciente)) {\n  // Paciente encontrado\n  pacienteInfo = dniValidationResponse;\n  continueFlow = true;\n  \n  console.log('‚úÖ PACIENTE ENCONTRADO:', {\n    id: pacienteInfo.id || pacienteInfo.idPaciente,\n    nombre: pacienteInfo.nombre,\n    apellido: pacienteInfo.apellido,\n    dni: dni\n  });\n  \n  // Obtener especialidades del maestro\n  const especialidades = maestros.especialidades;\n  \n  let nombreCompleto = [pacienteInfo.nombre, pacienteInfo.apellido].filter(Boolean).join(' ');\n  let especialidadesText = `üëã ¬°Hola ${nombreCompleto}!\\\\n\\\\nüë®‚Äç‚öïÔ∏è *Seleccione una especialidad:*\\\\n\\\\n`;\n  especialidades.forEach(esp => {\n    especialidadesText += `${esp.idEspecialidad}. ${esp.descripcion}\\n`;\n  });\n  \n  responseMessage = especialidadesText;\n  newEstado = \"ESPERANDO_ESPECIALIDAD\";\n  \n} else {\n  // Paciente no encontrado\n  continueFlow = false;\n  \n  console.log('‚ùå PACIENTE NO ENCONTRADO para DNI:', dni);\n  console.log('API Response details:', {\n    hasResponse: !!dniValidationResponse,\n    responseKeys: dniValidationResponse ? Object.keys(dniValidationResponse) : [],\n    responseType: typeof dniValidationResponse\n  });\n  \n  responseMessage = `‚ùå *Paciente no encontrado*\\n\\n` +\n                   `No se encontr√≥ un paciente registrado con el DNI: ${dni}\\n\\n` +\n                   `Por favor verifique el n√∫mero de documento o consulte en recepci√≥n para registrarse.\\n\\n` +\n                   `Si necesita agendar un turno con otro DNI, env√≠e cualquier mensaje para comenzar nuevamente.`;\n  newEstado = \"INICIO\"; // Reiniciar el flujo\n}\n\n// APLICAR LIMPIEZA DE CARACTERES\nlet cleanedResponse = responseMessage\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\n// Asegurar que el DNI est√© en updateData para flujos posteriores\nlet finalUpdateData = continueFlow ? {\n  ...processStepData.updateData,\n  dni: dni, // Asegurar que el DNI est√© presente\n  pacienteInfo: pacienteInfo\n} : {}; // Limpiar datos si no se encuentra el paciente\n\nreturn {\n  json: {\n    chatId: processStepData.chatId,\n    continueFlow: continueFlow,\n    response: {\n      message: cleanedResponse,\n      sendToAPI: false\n    },\n    newEstado: newEstado,\n    updateData: finalUpdateData,\n    pacienteInfo: pacienteInfo,\n    isValid: true,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        340
      ],
      "id": "15c2697e-7d23-4450-a3ff-35aada7bcd69",
      "name": "Process DNI Validation"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "menssageIn",
            "type": "main",
            "index": 0
          },
          {
            "node": "send-typing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "menssageIn": {
      "main": [
        [
          {
            "node": "Read JSONBin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Session": {
      "main": [
        [
          {
            "node": "Process Step Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Step Logic": {
      "main": [
        [
          {
            "node": "DNI Validation Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DNI Validation Decision": {
      "main": [
        [
          {
            "node": "DNI Validation - Get Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update User Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update User Session": {
      "main": [
        [
          {
            "node": "Write JSONBin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare API Request": {
      "main": [
        [
          {
            "node": "API Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Token": {
      "main": [
        [
          {
            "node": "Send to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Response": {
      "main": [
        [
          {
            "node": "Send WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to API": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read JSONBin": {
      "main": [
        [
          {
            "node": "Get User Session",
            "type": "main",
            "index": 0
          },
          {
            "node": "Maestros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write JSONBin": {
      "main": [
        [
          {
            "node": "Prepare API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "API Decision": {
      "main": [
        [
          {
            "node": "Format Final Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DNI Validation - Get Token": {
      "main": [
        [
          {
            "node": "DNI Validation Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DNI Validation Request": {
      "main": [
        [
          {
            "node": "Process DNI Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process DNI Validation": {
      "main": [
        [
          {
            "node": "Update Session - DNI Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Session - DNI Validation": {
      "main": [
        [
          {
            "node": "Write JSONBin 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format DNI Validation Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format DNI Validation Response": {
      "main": [
        [
          {
            "node": "Send WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "73365e21-0cde-4b23-b62a-f62eea2387e5",
  "meta": {
    "instanceId": "556514cf317cac5c724bf084ccbb32127ff27cc56f225fb39f131295f3c7f3d0"
  },
  "id": "v8eKjjtCYC1WyQw8",
  "tags": []
}
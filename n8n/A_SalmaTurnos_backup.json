{
  "name": "A_SalmaTurnos",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ac247fd3-9ca7-42a3-8942-7ea8c321c46d",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        360,
        340
      ],
      "id": "7e6a8aa9-af88-4906-8aa0-d3a2841d21aa",
      "name": "Webhook Start",
      "webhookId": "e3b2122c-9d00-4104-b64f-91553cc08f8c"
    },
    {
      "parameters": {
        "jsCode": "// Parse WhatsApp Message\nconst items = $input.all();\nconst message = items[0].json.body.data.message;\n\nif (!message || message.type !== 'chat') {\n  return [{ json: { error: \"Invalid message type\" } }];\n}\n\nconst chatId = message.from;\nconst messageText = message.body?.trim() || \"\";\nconst messageId = message.id;\n\nreturn {\n  json: {\n    chatId: chatId,\n    messageText: messageText,\n    messageId: messageId,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        340
      ],
      "id": "4403f41f-7553-42c3-b0bb-038b0e25a219",
      "name": "Parse Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/login",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"user\": \"admin\",\n  \"password\": \"1234\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        760,
        140
      ],
      "id": "2d0ff9af-a7e0-47e6-a432-56fb3035ec51",
      "name": "Get Auth Token"
    },
    {
      "parameters": {
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        760,
        340
      ],
      "id": "06c446c8-ced2-4111-9163-419001469ad4",
      "name": "Get User Session"
    },
    {
      "parameters": {
        "url": "https://api.salmasalud.com.ar/especialidades",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Auth Token').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        140
      ],
      "id": "024d734d-041e-4578-9a47-d45650924ef6",
      "name": "Get Especialidades"
    },
    {
      "parameters": {
        "jsCode": "// Process User State and Determine Next Step\nconst chatId = $('Parse Message').first().json.chatId;\nconst messageText = $('Parse Message').first().json.messageText.toLowerCase().trim();\nconst token = $('Get Auth Token').first().json.token;\nconst especialidades = $('Get Especialidades').first().json;\n\n// Get user session from JSONBin\nlet allSessions = {};\nlet userSession = null;\n\ntry {\n  const jsonbinResponse = $('Get User Session').first().json;\n  if (jsonbinResponse && jsonbinResponse.record && jsonbinResponse.record.sessions) {\n    allSessions = jsonbinResponse.record.sessions;\n    console.log('✅ JSONBin data loaded, total users:', Object.keys(allSessions).length);\n  } else {\n    console.log('⚠️ No existing JSONBin data, creating new structure');\n    allSessions = {};\n  }\n  userSession = allSessions[chatId];\n} catch (error) {\n  console.log('❌ Error reading JSONBin, creating new structure:', error.message);\n  allSessions = {};\n}\n\n// Initialize new session if needed\nconst isNewUser = !userSession;\nif (!userSession) {\n  userSession = {\n    chatId: chatId,\n    estado: \"INICIO\",\n    datos: {},\n    createdAt: new Date().toISOString(),\n    lastActivity: new Date().toISOString()\n  };\n  console.log('🆕 Created new user session for:', chatId);\n} else {\n  userSession.lastActivity = new Date().toISOString();\n  console.log('🔄 Updated existing user session for:', chatId);\n}\n\n// Process based on current state\nlet response = {};\nlet newState = userSession.estado;\nlet updateData = { ...userSession.datos };\nlet isValid = true;\nlet errorMessage = \"\";\nlet needsDniValidation = false;\nlet needsDaysData = false;\nlet needsHoursData = false;\nlet needsApiSubmission = false;\n// CRITICAL FIX: Detect if we're transitioning from INICIO/COMPLETADO states
const currentState = userSession.estado;
let skipDniProcessing = (currentState === "INICIO" || currentState === "COMPLETADO");\n\nswitch (userSession.estado) {\n  case \"INICIO\":\n  case \"COMPLETADO\":\n    // Start or restart flow - ONLY show welcome message\n    if (userSession.estado === \"COMPLETADO\") {\n      updateData = {}; // Clear previous data\n    }\n    response = {\n      message: \"🏥 Bienvenido al Sistema de Turnos\\n\\nPor favor, indique su DNI (solo números, sin puntos):\"\n    };\n    newState = \"ESPERANDO_DNI\";\n    console.log('🔄 State transition: ' + currentState + ' -> ESPERANDO_DNI (skipDniProcessing: true)');\n    break;\n\n  case \"ESPERANDO_DNI\":\n    // CRITICAL: Skip DNI processing if we just transitioned from INICIO/COMPLETADO\n    if (skipDniProcessing) {\n      console.log('⏭️ Skipping DNI processing - just transitioned from ' + currentState + ' state');\n      // The user will need to send another message for actual DNI validation\n      // Keep current response (welcome message) and don't process current message as DNI\n      break;\n    }\n    \n    // Process actual DNI input from user's next message\n    console.log('🔍 Processing DNI input: \"' + messageText + '\"');\n    \n    // Clean and validate DNI\n    const cleanDNI = messageText.replace(/[^\\d]/g, '');\n    \n    if (!cleanDNI || cleanDNI.length < 7 || cleanDNI.length > 8) {\n      isValid = false;\n      errorMessage = `❌ DNI inválido\\n\\nPor favor ingrese solo números, entre 7 y 8 dígitos.\\n\\nFormatos aceptados:\\n• 25430441\\n• 25.430.441\\n• 25 430 441\\n\\nSu entrada: \"${messageText}\"\\nProcesado como: \"${cleanDNI}\"`;\n    } else {\n      updateData.dni = cleanDNI;\n      needsDniValidation = true;\n      newState = \"VALIDANDO_DNI\";\n      response = {\n        message: \"⏳ Validando DNI...\"\n      };\n    }\n    break;\n\n  case \"ESPERANDO_ESPECIALIDAD\":\n    const especialidadId = parseInt(messageText);\n    const especialidad = especialidades.find(e => e.idEspecialidad === especialidadId);\n    \n    if (!especialidad) {\n      isValid = false;\n      let opciones = especialidades.map(e => `${e.idEspecialidad}. ${e.descripcion}`).join('\\n');\n      errorMessage = `❌ No se reconoce el valor ingresado\\n\\nOpciones válidas:\\n${opciones}`;\n    } else {\n      updateData.especialidad = especialidad;\n      needsDaysData = true;\n      newState = \"CARGANDO_DIAS\";\n      response = {\n        message: `⏳ Obteniendo días disponibles para ${especialidad.descripcion}...`\n      };\n    }\n    break;\n\n  case \"ESPERANDO_DIA\":\n    const diaId = parseInt(messageText);\n    if (!updateData.diasDisponibles || !updateData.diasDisponibles[diaId]) {\n      isValid = false;\n      if (updateData.diasDisponibles) {\n        let opciones = Object.keys(updateData.diasDisponibles).map(key => `${key}. ${updateData.diasDisponibles[key]}`).join('\\n');\n        errorMessage = `❌ No se reconoce el valor ingresado\\n\\nOpciones válidas:\\n${opciones}`;\n      } else {\n        errorMessage = \"❌ Error: Días no cargados. Por favor inicie nuevamente el proceso.\";\n      }\n    } else {\n      updateData.diaSeleccionado = {\n        id: diaId,\n        descripcion: updateData.diasDisponibles[diaId]\n      };\n      needsHoursData = true;\n      newState = \"CARGANDO_HORARIOS\";\n      response = {\n        message: `⏳ Obteniendo horarios disponibles para ${updateData.diaSeleccionado.descripcion}...`\n      };\n    }\n    break;\n\n  case \"ESPERANDO_HORARIO\":\n    const horarioId = parseInt(messageText);\n    if (!updateData.horariosDisponibles || !updateData.horariosDisponibles[horarioId]) {\n      isValid = false;\n      if (updateData.horariosDisponibles) {\n        let opciones = Object.keys(updateData.horariosDisponibles).map(key => `${key}. ${updateData.horariosDisponibles[key]}`).join('\\n');\n        errorMessage = `❌ No se reconoce el valor ingresado\\n\\nOpciones válidas:\\n${opciones}`;\n      } else {\n        errorMessage = \"❌ Error: Horarios no cargados. Por favor inicie nuevamente el proceso.\";\n      }\n    } else {\n      updateData.horarioSeleccionado = {\n        id: horarioId,\n        descripcion: updateData.horariosDisponibles[horarioId]\n      };\n      \n      // Show confirmation\n      const resumen = `📋 Resumen del Turno:\\n\\n` +\n                     `👤 DNI: ${updateData.dni}\\n` +\n                     `👨‍⚕️ Especialidad: ${updateData.especialidad.descripcion}\\n` +\n                     `📅 Día: ${updateData.diaSeleccionado.descripcion}\\n` +\n                     `🕐 Horario: ${updateData.horarioSeleccionado.descripcion}\\n\\n` +\n                     `¿Confirma el turno?\\n\\n` +\n                     `1. ✅ Aceptar\\n` +\n                     `2. ❌ Cancelar`;\n      \n      response = {\n        message: resumen\n      };\n      newState = \"CONFIRMACION\";\n    }\n    break;\n\n  case \"CONFIRMACION\":\n    const confirmacion = parseInt(messageText);\n    \n    if (confirmacion === 1) {\n      needsApiSubmission = true;\n      newState = \"ENVIANDO_API\";\n      response = {\n        message: \"✅ Turno confirmado\\n\\nProcesando su solicitud...\"\n      };\n    } else if (confirmacion === 2) {\n      updateData = {};\n      newState = \"INICIO\";\n      response = {\n        message: \"❌ Turno cancelado\\n\\n¿Desea agendar un nuevo turno?\\n\\nEnvíe cualquier mensaje para comenzar.\"\n      };\n    } else {\n      isValid = false;\n      errorMessage = \"❌ No se reconoce el valor ingresado\\n\\nOpciones válidas:\\n1. ✅ Aceptar\\n2. ❌ Cancelar\";\n    }\n    break;\n\n  default:\n    // Unknown state, restart\n    response = {\n      message: \"🏥 Bienvenido al Sistema de Turnos\\n\\nPor favor, indique su DNI (solo números, sin puntos):\"\n    };\n    newState = \"ESPERANDO_DNI\";\n    updateData = {};\n}\n\n// Update session data\nallSessions[chatId] = {\n  chatId: chatId,\n  estado: isValid ? newState : userSession.estado,\n  datos: isValid ? updateData : userSession.datos,\n  createdAt: userSession.createdAt,\n  lastActivity: new Date().toISOString()\n};\n\n// Clean message for WhatsApp\nlet finalMessage = isValid ? response.message : errorMessage;\nlet cleanedMessage = finalMessage\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    isValid: isValid,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    token: token,\n    needsDniValidation: needsDniValidation,\n    needsDaysData: needsDaysData,\n    needsHoursData: needsHoursData,\n    needsApiSubmission: needsApiSubmission,\n    currentState: isValid ? newState : userSession.estado,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1160,
        340
      ],
      "id": "6a61c63d-8ee1-4b05-bed9-5414eb0dc1ab",
      "name": "Process State Logic"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "dni-validation",
              "leftValue": "={{ $json.needsDniValidation }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1360,
        240
      ],
      "id": "8eb0c984-dfca-445d-9323-3f33257e7101",
      "name": "Check DNI Validation"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/paciente-by-documento/{{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.dni }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1560,
        140
      ],
      "id": "04148c25-384a-4a9c-9176-852be2dfc9b5",
      "name": "Validate DNI"
    },
    {
      "parameters": {
        "jsCode": "// Process DNI Validation Result\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\nconst especialidades = $('Get Especialidades').first().json;\n\n// Check if DNI validation was successful\nlet dniValid = false;\nlet errorMessage = \"\";\n\ntry {\n  const dniResponse = $('Validate DNI').first().json;\n  if (dniResponse && (dniResponse.idPaciente || dniResponse.id)) {\n    dniValid = true;\n    // Store patient data\n    allSessions[chatId].datos.paciente = dniResponse;\n  } else {\n    errorMessage = \"❌ DNI no encontrado en el sistema\\n\\nPor favor verifique el número ingresado o comuníquese con la clínica para registrarse.\";\n  }\n} catch (error) {\n  console.log('DNI Validation Error:', error.message);\n  errorMessage = \"❌ Error validando DNI\\n\\nPor favor intente nuevamente o verifique el número ingresado.\";\n}\n\nlet responseMessage = \"\";\n\nif (dniValid) {\n  // Show specialties\n  allSessions[chatId].estado = \"ESPERANDO_ESPECIALIDAD\";\n  \n  let especialidadesText = \"👨‍⚕️ Seleccione una especialidad:\\n\\n\";\n  especialidades.forEach(esp => {\n    especialidadesText += `${esp.idEspecialidad}. ${esp.descripcion}\\n`;\n  });\n  \n  responseMessage = especialidadesText;\n} else {\n  // Keep in DNI state with error\n  allSessions[chatId].estado = \"ESPERANDO_DNI\";\n  responseMessage = errorMessage;\n}\n\n// Clean message for WhatsApp\nlet cleanedMessage = responseMessage\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    dniValid: dniValid,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        140
      ],
      "id": "448df4b9-65ff-4b58-ad0e-38952a87c2ea",
      "name": "Process DNI Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "days-data",
              "leftValue": "={{ $('Process State Logic').first().json.needsDaysData }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1360,
        440
      ],
      "id": "b49e4bbb-569d-49e8-815a-a33c76a5c83a",
      "name": "Check Days Data"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/dias?idEspecialidad={{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1560,
        440
      ],
      "id": "0ede3214-08e3-46df-bdc8-c415c2037c5c",
      "name": "Get Days"
    },
    {
      "parameters": {
        "jsCode": "// Process Days Data\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\n// Get days from API response\nconst diasResponse = $('Get Days').first().json;\nlet diasObj = {};\n\n// Process days - expecting array with idTipoDia and descripcion\nif (Array.isArray(diasResponse)) {\n  diasResponse.forEach(dia => {\n    if (dia.idTipoDia && dia.descripcion) {\n      diasObj[dia.idTipoDia] = dia.descripcion;\n    }\n  });\n} else if (diasResponse && typeof diasResponse === 'object') {\n  // If it's already an object, use it directly\n  diasObj = diasResponse;\n}\n\n// Store days data in session\nallSessions[chatId].datos.diasDisponibles = diasObj;\nallSessions[chatId].estado = \"ESPERANDO_DIA\";\n\n// Format days for display\nlet diasText = \"📅 Seleccione un día:\\n\\n\";\nObject.keys(diasObj).forEach(key => {\n  diasText += `${key}. ${diasObj[key]}\\n`;\n});\n\n// Clean message for WhatsApp\nlet cleanedMessage = diasText\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        440
      ],
      "id": "53be1039-9b3e-47b8-9dd3-3a0614919497",
      "name": "Process Days Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "hours-data",
              "leftValue": "={{ $('Process State Logic').first().json.needsHoursData }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1360,
        640
      ],
      "id": "27997ddb-6c43-4173-a84f-80310d0e8da4",
      "name": "Check Hours Data"
    },
    {
      "parameters": {
        "url": "=https://api.salmasalud.com.ar/rangos-horarios?idEspecialidad={{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1560,
        640
      ],
      "id": "b97dbaff-afd2-4db2-83c6-1f70cd575730",
      "name": "Get Hours"
    },
    {
      "parameters": {
        "jsCode": "// Process Hours Data\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\n// Get hours from API response\nconst horariosResponse = $('Get Hours').first().json;\nlet horariosObj = {};\n\n// Process hours - expecting array with idRangoHorario and descripcion\nif (Array.isArray(horariosResponse)) {\n  horariosResponse.forEach(horario => {\n    if (horario.idRangoHorario && horario.descripcion) {\n      horariosObj[horario.idRangoHorario] = horario.descripcion;\n    }\n  });\n} else if (horariosResponse && typeof horariosResponse === 'object') {\n  // If it's already an object, use it directly\n  horariosObj = horariosResponse;\n}\n\n// Store hours data in session\nallSessions[chatId].datos.horariosDisponibles = horariosObj;\nallSessions[chatId].estado = \"ESPERANDO_HORARIO\";\n\n// Format hours for display\nlet horariosText = \"🕐 Seleccione un horario:\\n\\n\";\nObject.keys(horariosObj).forEach(key => {\n  horariosText += `${key}. ${horariosObj[key]}\\n`;\n});\n\n// Clean message for WhatsApp\nlet cleanedMessage = horariosText\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        640
      ],
      "id": "8f6b9ada-e384-4c48-a332-6a4eaef6e7fd",
      "name": "Process Hours Result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "api-submission",
              "leftValue": "={{ $('Process State Logic').first().json.needsApiSubmission }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1360,
        840
      ],
      "id": "3ecba5d8-9fa9-4164-9a86-0aedab8a48c9",
      "name": "Check API Submission"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salmasalud.com.ar/solicitar",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Process State Logic').first().json.token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"idPaciente\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.paciente.idPaciente || $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.paciente.id }},\n  \"idEspecialidad\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.especialidad.idEspecialidad }},\n  \"idTipoDia\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.diaSeleccionado.id }},\n  \"idRangoHorario\": {{ $('Process State Logic').first().json.allSessions[$('Process State Logic').first().json.chatId].datos.horarioSeleccionado.id }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1560,
        840
      ],
      "id": "44e0d60e-63a6-4a24-9b13-39144ea52082",
      "name": "Submit Turno"
    },
    {
      "parameters": {
        "jsCode": "// Process API Submission Result\nconst stateData = $('Process State Logic').first().json;\nconst chatId = stateData.chatId;\nlet allSessions = stateData.allSessions;\n\n// Check API response\nlet success = false;\nlet responseMessage = \"\";\n\ntry {\n  const apiResponse = $('Submit Turno').first().json;\n  \n  if (apiResponse && (apiResponse.success || apiResponse.id || apiResponse.idSolicitud)) {\n    success = true;\n    allSessions[chatId].estado = \"COMPLETADO\";\n    \n    const userData = allSessions[chatId].datos;\n    responseMessage = `✅ Turno solicitado exitosamente\\n\\n` +\n                     `📋 Resumen:\\n` +\n                     `👤 DNI: ${userData.dni}\\n` +\n                     `👨‍⚕️ Especialidad: ${userData.especialidad.descripcion}\\n` +\n                     `📅 Día: ${userData.diaSeleccionado.descripcion}\\n` +\n                     `🕐 Horario: ${userData.horarioSeleccionado.descripcion}\\n\\n` +\n                     `📞 La clínica se comunicará con usted para confirmar el turno.\\n\\n` +\n                     `🔄 Para solicitar otro turno, envíe cualquier mensaje.`;\n  } else {\n    responseMessage = \"❌ Error al procesar la solicitud\\n\\nPor favor intente nuevamente más tarde o comuníquese directamente con la clínica.\";\n    // Keep in confirmation state to allow retry\n    allSessions[chatId].estado = \"CONFIRMACION\";\n  }\n} catch (error) {\n  console.log('API Submission Error:', error.message);\n  responseMessage = \"❌ Error al procesar la solicitud\\n\\nPor favor intente nuevamente más tarde o comuníquese directamente con la clínica.\";\n  allSessions[chatId].estado = \"CONFIRMACION\";\n}\n\n// Clean message for WhatsApp\nlet cleanedMessage = responseMessage\n  .replace(/^#+\\s+(.+)$/gm, \"$1\")\n  .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\")\n  .replace(/^\\s*-\\s+/gm, \"- \");\n\nreturn {\n  json: {\n    chatId: chatId,\n    response: {\n      message: cleanedMessage\n    },\n    allSessions: allSessions,\n    success: success,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        840
      ],
      "id": "ee9aa8bb-9ac2-45f5-8ba0-c79057cf0e63",
      "name": "Process API Result"
    },
    {
      "parameters": {
        "jsCode": "// Merge All Responses\nconst stateData = $('Process State Logic').first().json;\n\n// Check if we have responses from other nodes\nlet finalResponse = stateData.response;\nlet finalAllSessions = stateData.allSessions;\n\n// Check for DNI validation result\ntry {\n  const dniResult = $('Process DNI Result').first()?.json;\n  if (dniResult && dniResult.response) {\n    finalResponse = dniResult.response;\n    finalAllSessions = dniResult.allSessions;\n  }\n} catch (error) {\n  // No DNI result, continue\n}\n\n// Check for days result\ntry {\n  const daysResult = $('Process Days Result').first()?.json;\n  if (daysResult && daysResult.response) {\n    finalResponse = daysResult.response;\n    finalAllSessions = daysResult.allSessions;\n  }\n} catch (error) {\n  // No days result, continue\n}\n\n// Check for hours result\ntry {\n  const hoursResult = $('Process Hours Result').first()?.json;\n  if (hoursResult && hoursResult.response) {\n    finalResponse = hoursResult.response;\n    finalAllSessions = hoursResult.allSessions;\n  }\n} catch (error) {\n  // No hours result, continue\n}\n\n// Check for API submission result\ntry {\n  const apiResult = $('Process API Result').first()?.json;\n  if (apiResult && apiResult.response) {\n    finalResponse = apiResult.response;\n    finalAllSessions = apiResult.allSessions;\n  }\n} catch (error) {\n  // No API result, continue\n}\n\nreturn {\n  json: {\n    chatId: stateData.chatId,\n    response: finalResponse,\n    allSessions: finalAllSessions,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        380
      ],
      "id": "caf417be-113b-4405-a5fd-1e19af128d94",
      "name": "Merge Responses"
    },
    {
      "parameters": {
        "jsCode": "// Update Session - MANEJO DE USUARIOS NUEVOS\nconst mergeData = $('Merge Responses').first().json;\nconst chatId = mergeData.chatId;\nconst newState = mergeData.allSessions[chatId]?.estado;\nconst sessionData = mergeData.allSessions[chatId]?.datos;\n\n// Obtener JSONBin actual o crear estructura vacía si no existe\nlet allSessions = {};\ntry {\n  // En este punto ya tenemos los datos procesados de mergeData\n  allSessions = mergeData.allSessions;\n  console.log('✅ JSONBin data loaded, total users:', Object.keys(allSessions).length);\n} catch (error) {\n  console.log('❌ Error reading JSONBin, creating new structure:', error.message);\n  allSessions = {};\n}\n\n// Crear o actualizar sesión del usuario\nconst isNewUser = !allSessions[chatId]?.createdAt;\n\nif (allSessions[chatId]) {\n  allSessions[chatId] = {\n    chatId: chatId,\n    estado: newState,\n    datos: sessionData,\n    createdAt: isNewUser ? new Date().toISOString() : (allSessions[chatId]?.createdAt || new Date().toISOString()),\n    updatedAt: new Date().toISOString(),\n    lastActivity: new Date().toISOString()\n  };\n}\n\nconsole.log(isNewUser ? '🆕 Created new user session' : '🔄 Updated existing user session');\nconsole.log('User state:', newState);\nconsole.log('Session data:', JSON.stringify(sessionData, null, 2));\n\n// Preparar estructura completa para JSONBin\nconst jsonbinData = {\n  sessions: allSessions\n};\n\nreturn {\n  json: {\n    chatId: chatId,\n    jsonbinData: jsonbinData,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2160,
        200
      ],
      "id": "1c01c3fc-a967-4aaf-aea6-da07c0d639fe",
      "name": "Prepare JSONBin Update"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://api.jsonbin.io/v3/b/687566205d646f1c273fa03e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Master-Key",
              "value": "$2a$10$x6g.oxG8TSRAhrOyGXNhjOcipTIiu9RU3X/h2S0DC4kbIalK9KxEO"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.jsonbinData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2440,
        180
      ],
      "id": "e3e26e94-ac52-4dd6-a02c-3842a9e0571d",
      "name": "Update JSONBin"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for WhatsApp\nconst mergeData = $('Merge Responses').first().json;\n\nreturn {\n  json: {\n    chatId: mergeData.chatId,\n    message: mergeData.response.message\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        540
      ],
      "id": "e44f33a1-fe09-445c-8e2b-09f577d8083c",
      "name": "Prepare WhatsApp Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://waapi.app/api/v1/instances/76556/client/action/send-message ",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer RnfskkYrbR0Sh2Acnr5B9GwPDl545m1jPPKDbccoa2ab2e89"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chatId\": {{ JSON.stringify($json.chatId) }},\n  \"message\": {{ JSON.stringify($json.message) }}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2700,
        380
      ],
      "id": "47256713-26da-45ec-badb-34a8d53805df",
      "name": "Send WhatsApp"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Start": {
      "main": [
        [
          {
            "node": "Parse Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Message": {
      "main": [
        [
          {
            "node": "Get Auth Token",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get User Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Auth Token": {
      "main": [
        [
          {
            "node": "Get Especialidades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Session": {
      "main": [
        [
          {
            "node": "Process State Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Especialidades": {
      "main": [
        [
          {
            "node": "Process State Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process State Logic": {
      "main": [
        [
          {
            "node": "Check DNI Validation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Days Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Hours Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check API Submission",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check DNI Validation": {
      "main": [
        [
          {
            "node": "Validate DNI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate DNI": {
      "main": [
        [
          {
            "node": "Process DNI Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process DNI Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Days Data": {
      "main": [
        [
          {
            "node": "Get Days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Days": {
      "main": [
        [
          {
            "node": "Process Days Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Days Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Hours Data": {
      "main": [
        [
          {
            "node": "Get Hours",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Hours": {
      "main": [
        [
          {
            "node": "Process Hours Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Hours Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Submission": {
      "main": [
        [
          {
            "node": "Submit Turno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Submit Turno": {
      "main": [
        [
          {
            "node": "Process API Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process API Result": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Responses": {
      "main": [
        [
          {
            "node": "Prepare JSONBin Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare JSONBin Update": {
      "main": [
        [
          {
            "node": "Update JSONBin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update JSONBin": {
      "main": [
        [
          {
            "node": "Prepare WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare WhatsApp Message": {
      "main": [
        [
          {
            "node": "Send WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f4b545d9-fcdc-48fd-91a0-aa06d05b53ba",
  "meta": {
    "instanceId": "556514cf317cac5c724bf084ccbb32127ff27cc56f225fb39f131295f3c7f3d0"
  },
  "id": "v8eKjjtCYC1WyQw8",
  "tags": []
}